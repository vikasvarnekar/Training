rh._.exports({"0":["Customizing Effectivity String Notations"],"1":["\n  ","\n  ","\n  ","Effectivity Expressions are saved as XML. User-friendly Expression notations appear to the user. Notations can be customized.","\n  ","Effectivity on a ","Part BOM ","relationship is managed using its related ","effs_Part_BOM_expression"," items. A ","Part BOM"," Relationship can have zero, one, or more Effectivities. The ","string_notation"," text property on the"," effs_Part_BOM_expression"," ItemType stores the user-friendly Notation for a single Effectivity expression. The ","effs_expression_string_notation"," federated property on the ","Part BOM"," ItemType dynamically constructs the Effectivity text from its related Effectivities.","\n  ","The string_notation property from the effs_Part_BOM_expression ItemType appears in:","\n  ","\n    ","The ","Manage Effectivity Expressions"," split pane on the ","BOM Structure"," accordion tab of the ","Part ","item view when you access the ","View Effectivity"," context menu item.","\n    ","\n    ","The ","Effectivity ","accordion tab of the ","Part BOM"," Relationship item view.","\n  ","\n  ","The ","eff_expression_string_notation"," property on the ","Part BOM"," ItemType is displayed in the ","BOM Structure"," tab of the ","Part ","item view in the ","Effectivity ","column.","\n  ","\n  ","When you create and update an Effectivity expression it gets a new Effectivity String Notation. This behavior is the job of the ","effs_expStringNotationConversion"," server-side method executed on the ","onBeforeAdd ","and ","onBeforeUpdate ","events of the ","effs_Part_BOM_expression"," items. This method converts an Effectivity condition to an Effectivity String Notation and stores the output to the ","string_notation"," item property.","\n  ","Customizing Effectivity String notations requires modification of the discussed method as follows:","\n  ","\n    ","Define a ","new class"," to represent a new Effectivity String Notation converter and to provide a String Notation value for a given Effectivity Expression object representation. This ","class ","should get objects of Effectivity variables and Effectivity expression, convert them into Effectivity String Notation, and return this Notation. The ","class ","must implement the ","Aras.Server.Core.Configurator.IStringNotationConverter"," interface, as scheduled in the Appendix.","\n  ","\n  ","A new class for a custom Effectivity String Notation converter is required because the Aras.Server.Core.Configurator.ExpressionToStringNotationConverter class with the default Effectivity String Notation converter is compiled. A customization example is provided in the Appendix.","\n  ","\n    ","In the CreateNewStringNotationConverter local method definition, replace the ","Aras.Server.Core.Configurator.ExpressionToStringNotationConverter ","class with your custom class defined in step 1 in the return statement creating a new instance of the given class. Do not change the variableContainer argument.","\n  ","\n  ","internal virtual Aras.Server.Core.Configurator.IStringNotationConverterCreateNewStringNotationConverter(IEnumerable<Aras.Server.Core.Configurator.Variable> variableContainer)","\n    {","\n    return new","\n    Aras.Server.Core.Configurator.ExpressionToStringNotationConverter(variableContainer);","\n    }","\n  ","\n  ","\n  ","In Aras Innovator 12.0, the part BOM Type is the Effectivity Scope ItemType of the Aras part BOM Scope. An ItemType used as the Effectivity Scope ItemType can have a unified Effectivity String Notation joined from its single Effectivity Expressions. To provide this feature, the Part BOM ItemType uses the:","\n  ","\n    ","eff_expression_string_notation"," federated property.","\n    ","effs_getExpressionStringNotation"," server-side method executed on the onAfterGet event.","\n  ","\n  ","Customizing the unified Effectivity String Notations requires modification of this method, where the ","\n        ","JoinExpressionStringNotation","\n      "," ","local method definition is changed according to the desired uniting template.","\n  ","The local method produces a single value for the ","eff_expression_string_notation"," property. It combines related Effectivity Expressions using a conjunction.","\n  ","The following is the default implementation of ","JoinExpressionStringNotation"," where parentheses enclose individual Effectivity String Notations and commas join these notations.","\n  ","internal virtual string JoinExpressionStringNotation (IEnumerable<string> expressionStringNotations)","\n    ","\n    {","\n        if","\n        (!string.IsNullOrEmpty(expressionStringNotations.ElementAtOrDefault(1)))","\n    {","\n           expressionStringNotations = expressionStringNotations.Select(","\n           expressionStringNotations => \"(\" + expressionStringNotation + ')');","\n    }","\n    return string.Join(', \", expressionStringNotations);","\n    }","\n  ","\n\n","\n  ","\n    "," ","\n    ","©2020 Aras Corporation - All Rights Reserved","\n  ","\n\n"],"2":["Customizing Effectivity String Notations"],"3":["Customizing Effectivity String Notation on Effectivity Expression","Customizing Unified Effectivity String Notation"],"id":"76"})