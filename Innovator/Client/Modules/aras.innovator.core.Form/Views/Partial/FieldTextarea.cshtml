@using System
@using Models
@using Models.AML.Enums
@using Models.Helpers
@model Models.FieldRenderModel

@{
	var fieldId = Model.FieldNode.Id;
	var fieldNm = Model.FieldNode.Name;

	var tabIndex = Model.FieldNode.TabStop ? Model.FieldNode.TabIndex.Value : "-1";
	var textareaSizeInfo = MethodsExUtils.UiGetTextAreaSizeInfo(Model.FieldNode);
	var userOnBlur = String.Empty;
	var userOnChange = String.Empty;
	var userEventsForInput = String.Empty;
	var readOnlyProp = MethodsExUtils.UiIsFieldReadOnly(Model.FieldNode, Model.PropertyNode);

	
	var readOnly = (Model.Mode == "edit_form" || Model.Mode == "view_form") || (Model.Mode != "search" && readOnlyProp) ? "readOnly" : String.Empty;
	var onchangeCode = MethodsExUtils.GenerateOnChangeHandler(FieldType.TextArea, Model.FieldNode, Model.PropertyNode, Model.Mode);
	userOnBlur = onchangeCode.UserOnBlurCode;
	userOnChange = onchangeCode.UserOnChangeCode;
	
	if (Model.Mode != "search")
	{
		userEventsForInput = MethodsExUtils.AssignFieldEventEx(Model.FieldNode, "onchange,onblur", null);
	}
	
	<textarea @Html.Raw(textareaSizeInfo.Attribute) style="@(textareaSizeInfo.Style)" aria-labelledby="@(fieldId)_label" id="@(fieldId)" name="@(fieldNm)" class="@(fieldNm)" @(readOnly)
		@if (Model.Mode != "edit_form" && Model.Mode != "view_form" && !Model.PropertyNode.IsNull)
		{
			@:onchange="
			@:@(Html.Raw(onchangeCode.OnChangeCode))"
			@:onblur="
			@:@(Html.Raw(onchangeCode.OnBlurCode))"
		} @Html.Raw(userEventsForInput) @Html.Raw(String.IsNullOrEmpty(tabIndex) ? "" : " tabindex=\"" + tabIndex + "\"")></textarea>


	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		if (!Model.PropertyNode.IsNull)
		{
			@(Html.Raw(userOnChange))
			@(Html.Raw(userOnBlur))	
		}  
	
		<script type="text/javascript">
			function system_@(fieldId)_value(event)
			{
				if (event.propertyName != "value") return true;
				var ctrlElem = event.srcElement;
				if (!ctrlElem) return true;
				var textarea = document.getElementById("@(fieldId)");
				if (!textarea) return true;
				if (textarea.value == ctrlElem.value) return true;
				@{   
					@:textarea.value = ctrlElem.value;
				}
				return true;
			}
			@if (!Model.PropertyNode.IsNull)
			{
				@:if (observersHash.getElementById("@(Model.PropertyNode.Name)_system"))
				@:	observersHash.getElementById("@(Model.PropertyNode.Name)_system").attachEvent("onpropertychange", system_@(fieldId)_value);	
			}
			document.getElementById("@(fieldId)").propNm = "@(Model.PropertyNode.Name)";
		</script>
	}
	<script type="text/javascript">
		function expression_@(fieldId)_setExpression(isEditMode)
		{
			@if (Model.Mode != "edit_form" && Model.Mode != "view_form" && !readOnlyProp)
			{
				@:var field = document.getElementById('@(fieldId)');
				@:if (!isEditMode) field.setAttribute('readonly', 'readonly');
				@:else field.removeAttribute('readonly');
			}
		}
		setTimeout('expression_@(fieldId)_setExpression(document.isEditMode)', 1);
	</script>  
}
