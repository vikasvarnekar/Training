@using System
@using System.Linq
@using System.Text.RegularExpressions
@using System.Web.Mvc.Html
@using Models
@using Models.AML.Enums
@using Models.AML.ItemTypes
@using Models.Helpers
@model FieldToDraw
@{
	var fieldNode = Model.FieldNode;
	var propNode = Model.PropertyNode;
	var mode = Model.Mode;
	var itemTypeNode = Model.ItemType;

	if (fieldNode == null)
	{
		return;
	}

	var allLanguages = Model.CommonInfo.AllLanguages;

	var regExSpace = new Regex(@"\s", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase | RegexOptions.Compiled);

	var fieldType = fieldNode.FieldType;
	var fieldId = fieldNode.Id;
	var fieldName = fieldNode.Name;

	var propDataType = String.Empty;
	var propName = String.Empty;
	var isRequired = false;
	var propIsReadOnly = false;
	if (propNode != null)
	{
		propDataType = propNode.DataType;
		if (propDataType == "foreign")
		{
			propNode = Model.CommonInfo.ForeignInfo.FirstOrDefault(item => item.Key == propNode.Id).Value;
		}
		if (propNode != null)
		{
			propDataType = propNode.DataType;
			propName = propNode.Name;
			isRequired = propNode.IsRequired;
			propIsReadOnly = propNode.ReadOnly;
		}
	}

	var languageCode = Model.CommonInfo.JSInfo.LanguageCode;
	Language sessionLanguage = allLanguages.FirstOrDefault(tmp => string.Equals(tmp.Code, languageCode, StringComparison.OrdinalIgnoreCase));
	Language fieldLabelLanguage = fieldNode.Label.IsNull ? null : allLanguages.FirstOrDefault(tmp => string.Equals(tmp.Code, fieldNode.Label.Lang, StringComparison.OrdinalIgnoreCase));
	string sessionLanguageDirection = sessionLanguage != null ? sessionLanguage.Direction.Value : null;
	string fieldLabelLanguageDirection = fieldLabelLanguage != null ? fieldLabelLanguage.Direction.Value : null;

	var sessLangDirection = "sys_session_lang_direction_" + (string.IsNullOrEmpty(sessionLanguageDirection) ? "ltr" : sessionLanguageDirection);
	var fieldLabelLangDirection = "sys_label_lang_direction_" + (string.IsNullOrEmpty(fieldLabelLanguageDirection) ? "ltr" : fieldLabelLanguageDirection);

	var labelPosition = !String.IsNullOrEmpty(fieldNode.LabelPosition) ? fieldNode.LabelPosition : "left";

	var labelPositionClass = "aras-field_label-" + labelPosition;
	var sysContainer = String.IsNullOrEmpty(Model.GroupBoxOrientation) ? "sys_f_container" : "sys_f_container sys_f_container_in_" + Model.GroupBoxOrientation + "_groupbox";
}<!--


beginning of @(fieldName)
--><div id="@(fieldId)span" name="@(fieldName)"
	class="@(sysContainer) @(sessLangDirection) @(fieldLabelLangDirection) @(String.IsNullOrEmpty(propDataType) ? String.Empty : "sys_dt_" + regExSpace.Replace(propDataType, "_")) @(isRequired ? "sys_p_is_required" : String.Empty) @(propIsReadOnly ? "sys_p_is_readonly" : String.Empty) @("sys_ft_" + regExSpace.Replace(SerializeUtils.GetFieldTypeName(fieldType), "_").ToLowerInvariant()) @("sys_fn_" + regExSpace.Replace(fieldName, "_")) @(String.IsNullOrEmpty(propName) ? String.Empty : ("sys_pn_" + regExSpace.Replace(propName, "_")))"
	style="@(fieldNode.Positioning.IsNull ? String.Empty : "position:" + fieldNode.Positioning.Value + ";") @(!fieldNode.Y.IsNull ? "top: " + fieldNode.Y + "px;" : String.Empty) @(!fieldNode.X.IsNull ? "left: " + fieldNode.X + "px;" : String.Empty) @(fieldNode.Width.IsNull ? String.Empty : "width: " + fieldNode.Width.Value + "px;") @(fieldNode.Height.IsNull ? String.Empty : "height: " + fieldNode.Height.Value + "px;") @(fieldNode.ZIndex.IsNull ? String.Empty : "z-index: " + fieldNode.ZIndex.Value+";") @(fieldNode.IsVisible ? String.Empty : "visibility:hidden;")">
	<fieldset style="border-style: solid; border-color: #ADAA9C; @(!fieldNode.BorderWidth.IsNull && !string.IsNullOrEmpty(fieldNode.BorderWidth.Value) ? "border-width: " + fieldNode.BorderWidth.Value + (System.Text.RegularExpressions.Regex.IsMatch(fieldNode.BorderWidth.Value, @"\d$") ? "px;" : String.Empty) : "border-width: 0;")">
		@{
			if (!string.IsNullOrEmpty(fieldNode.Legend.Value))
			{
				@:<legend class="sys_f_legend">@fieldNode.Legend.Value</legend>
			}
		}
		<div class="aras-field @(labelPositionClass)">
		@{
			var textAlign = !fieldNode.TextAlign.IsNull ? "text-align:" + fieldNode.TextAlign.Value + ";" : String.Empty;
			var fontFamily = !String.IsNullOrEmpty(Model.FieldNode.FontFamily) ? "font-family:" + Model.FieldNode.FontFamily + ";" : String.Empty;
			var fontSize = !String.IsNullOrEmpty(Model.FieldNode.FontSize) ? "font-size:" + Model.FieldNode.FontSize + ";" : String.Empty;
			var fontWeight = !String.IsNullOrEmpty(Model.FieldNode.FontWeight) ? "font-weight:" + Model.FieldNode.FontWeight + ";" : String.Empty;
			var fontColor = !String.IsNullOrEmpty(Model.FieldNode.FontColor) ? "color:" + Model.FieldNode.FontColor + ";" : String.Empty;
			var label = !Model.FieldNode.Label.IsNull ? Model.FieldNode.Label.Value : String.Empty;

			if (fieldType != FieldType.XClasses)
			{
				@:<span id="@(fieldId)_label" style="@(textAlign)@(fontFamily)@(fontSize)@(fontWeight)@(fontColor)" class="aras-field__label">@Html.Raw(String.IsNullOrEmpty(label) ? "" : MethodsExUtils.PreserveTags(label))</span>
			}

			if (mode == "add" && fieldType != FieldType.ClassStructure)
			{
				mode = "edit";
			}

			// Base information for field rendering
			var renderModel = new FieldRenderModel
			{
				FieldType = fieldType,
				FieldNode = fieldNode,
				PropertyNode = propNode,
				ItemTypeNode = itemTypeNode,
				AllLanguages = allLanguages,
				ListNode = Model.CommonInfo.ListInfo,
				FilterListNode = Model.CommonInfo.FilterListInfo,
				ResourceNode = Model.CommonInfo.ResourceInfo,
				ForeignPropertyNode = Model.CommonInfo.ForeignInfo,
				Mode = mode,
				BrowserType = BrowserHelper.ToBrowserType(Model.CommonInfo.JSInfo.BrowserCode),
				FormBodyBGColor = Model.CommonInfo.FormBodyBGColor
			};

			//the helper is to avoid extra new line for field html
			@helper RenderField(FieldType fieldType, FieldRenderModel renderModel)
			{
				switch (fieldType)
				{
					case FieldType.Item:
						renderModel.IsMLString = false;
						@Html.Partial("Partial/ComponentFieldItem", renderModel)
						break;
					case FieldType.ClassStructure:
						@Html.Partial("Partial/ComponentFieldClassStructure", renderModel);
						break;
					case FieldType.DropDown:
						@Html.Partial("Partial/ComponentFieldDropdown", renderModel)
						break;
					case FieldType.XClasses:
						@Html.Partial("Partial/XClasses", renderModel);
						break;
				}
			}
			@:<div class="aras-field__value">
			@:@RenderField(fieldType, renderModel)
			@:</div>

			var onRestrictedMsgClickFuncNm = "system$" + fieldId + "$restrictedMsgClick";
			var onClickHandlerBody = onRestrictedMsgClickFuncNm + "(true, event);";

			@:<div class="sys_f_restricted_msg" id="sys_f_restricted_msg" name="sys_f_restricted_msg" onclick="@(onClickHandlerBody)" onhelp="@(onRestrictedMsgClickFuncNm)(false, event);">@(MethodsExUtils.GetResource(Model.CommonInfo.ResourceInfo, "common.restricted_property_warning"))</div>
			<script type="text/javascript">
				function @(onRestrictedMsgClickFuncNm)(doHide, event)
				{
					if (!document.isEditMode && doHide == true) return false;
					var pn = "@(!String.IsNullOrEmpty(propName) ? propName : String.Empty)";
					var s = event.srcElement || event.target;
					if (!pn || !document.item.selectSingleNode(pn + "[@@is_null='0']"))
					{
						s.style.display = "";
						s.parentElement.getElementsByTagName("DIV")[0].style.display="";
						return;
					}
					s.style.display = (doHide ? "" : "block");
					s.parentElement.getElementsByTagName("DIV")[0].style.display = (doHide ? "" : "none");
				}
			</script>
		}</div>
		</fieldset>
</div><!-- end of @(fieldName) -->
