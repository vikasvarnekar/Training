@using System
@using System.Web.Mvc.Html
@using Models.AML.Enums
@using Models.AML.ItemTypes
@using Models.Helpers
@model Models.FieldRenderModel

@{
	var fieldId = Model.FieldNode.Id;
	var propNm = String.Empty;

	if (!Model.PropertyNode.IsNull)
	{
		propNm = Model.PropertyNode.Name;
	}

	var tabIndex = Model.FieldNode.TabStop ? Model.FieldNode.TabIndex.Value : "-1";
	var readOnlyProp = MethodsExUtils.UiIsFieldReadOnly(Model.FieldNode, Model.PropertyNode);
	var isDisabled = readOnlyProp ? "disabled" : String.Empty;
	var propDataType = !Model.PropertyNode.IsNull ? Model.PropertyNode.DataType : String.Empty;

	if (Model.Mode == "search")
	{
		Html.Partial("Partial/FieldChbRadListImageEx", Model);
	}
	else
	{
		if (!Model.PropertyNode.IsNull)
		{
			var listId = Model.PropertyNode.DataSource;
			if (!String.IsNullOrEmpty(listId.Value))
			{
				var chboxes = MethodsExUtils.GetListValues(Model.ListNode, Model.FilterListNode, listId.Value, propDataType);
				foreach (var item in chboxes)
				{
					var chbox = (Value)item;
					var val = chbox.ValueField;
					var label = chbox.Label.Value;
					if (chbox.Label.IsNull)
					{
						label = val;
					}

					var onChangeCode = String.Empty;
					var fieldEvents = String.Empty;
					if (Model.Mode != "edit_form" && Model.Mode != "view_form")
					{
						if (!String.IsNullOrEmpty(propNm))
						{
							if (propDataType == "mv_list")
							{
								onChangeCode += @"var ctrlElem = event.target;
												  if (!ctrlElem) return true;
												  var chboxSpans = aras.getElementsById(window.document, 'span', '" + fieldId + @"');
												  if (chboxSpans.length == 0) return true;
												  var val = ctrlElem.value;
												  function getSelectedValuesArr(chboxSpans) {
														var retArr = new Array();
														for (var i = 0; i < chboxSpans.length; i++) {
															checkbox = chboxSpans[i].getElementsByTagName('input')[0];
															if(checkbox.checked) {
																retArr.push(chboxSpans[i].attributes['name'].value);
															}
														}
														return retArr;
												  }
												  var tmpSelectedVal = aras.arrayToMVListPropertyValue(getSelectedValuesArr(chboxSpans));
												  if (window.handleItemChange) {
														handleItemChange('" + propNm + @"', tmpSelectedVal)
												  }";
							}
							else
							{
								onChangeCode += @"if (window.handleItemChange) 
													if(this.checked) 
														handleItemChange('" + propNm + @"', this.value);
													else if (this.autoUncheck != undefined && !this.autoUncheck) 
														handleItemChange('" + propNm + @"', '');";
							}
						}

						fieldEvents = MethodsExUtils.AssignFieldEventEx(Model.FieldNode, "onchange", null); // onchange processes below
					}
					else
					{
						isDisabled = "disabled";
					}

					var style = "position:relative;" + ((propDataType == "color list") ? "background-color:" + val + ";" : String.Empty);
					if (!Model.FieldNode.Orientation.IsNull && (Model.FieldNode.Orientation.Value == "vertical"))
					{
						style += "display:block;";
					}
					<span id="@(fieldId)" name="@(val)" style="@Html.Raw(style)">
						<input aria-labelledby="@(fieldId)@(val)_label" type="@(SerializeUtils.GetFieldTypeName(Model.FieldType))" value="@(val)" name="@(fieldId)name" class="arasCheckboxOrRadio" tabindex="@(tabIndex)" @Html.Raw(isDisabled)
								  @if (!String.IsNullOrEmpty(onChangeCode))
								  { 
									  @:onchange="@Html.Raw(onChangeCode)"
								  }
								  @Html.Raw(fieldEvents) />
						<label id="@(fieldId)@(val)_label" for="@(fieldId)_id">@(label)</label> @{/* TODO: fieldId_id ID didnt exist, Mb only fieldId? */}</span>
				}

				if (Model.Mode != "edit_form" && Model.Mode != "view_form")
				{
					var pattern = Model.PropertyNode.Pattern;
					if (propDataType == "filter list" && !pattern.IsNull)
					{
						var funcName = "system_" + fieldId + "_chboxes";
						<script type="text/javascript">
							function @(funcName)(event) 
							{
								if (!event) event = window.event;
								if (!event.srcElement) event.srcElement = event.target;
								if (event.propertyName != "value") return true;

								var chboxSpans = aras.getElementsById(document, "span", "@(fieldId)");
								if (chboxSpans.length == 0) {
									return true;
								}
								var i, val, chboxNd;
								if (chboxSpans.length == undefined) {
									chboxSpans = new Array(chboxSpans);
								}
								for (i = 0; i < chboxSpans.length; i++) {
									chboxSpans[i].style.display = "none";
								}
								var filterVal = event.srcElement.value;
								var chboxNds = aras.getListFilterValues("@(listId)");
								if (filterVal != "") {
									chboxNds = aras.uiGetFilteredListEx(chboxNds, "^" + filterVal + "$");
								}
								for (i = 0; i < chboxNds.length; i++) {
									chboxNd = chboxNds[i];
									val = aras.getItemProperty(chboxNd, "value");
									if (chboxSpans.length > 1) {
										for (var z = 0; z < chboxSpans.length; z++) {
											if (chboxSpans[z].firstChild.value == val) {
												chboxSpans[z].style.display = "inline";
											}
										}
									}
								}
								return true;
							}

							if (observersHash.getElementById("@(propNm)_system")) {
								observersHash.getElementById("@(pattern.Value)_system").attachEvent("onpropertychange", @(funcName));
							}
						</script>
					}
				}
			}
		}

		if (Model.Mode != "edit_form" && Model.Mode != "view_form")
		{
			var funcName = "system_" + fieldId + "_checked";
			<script type="text/javascript">
				function @(funcName)(event)
				{
					if (!event) event = window.event;
					if (!event.srcElement) event.srcElement = event.target;
					if (event.propertyName != "value") return true;
					var ctrlElem = event.srcElement;
					if (!ctrlElem) return true;
					var chboxSpans = aras.getElementsById(document, "span", "@(fieldId)");
					if (!chboxSpans) return true;
					var val = ctrlElem.value;
					if (chboxSpans[0].i_value == val) return true;
					var checkbox;
					chboxSpans[0].i_value = val;

					@if (propDataType == "mv_list")
					{
						@:var tmpArr = aras.mvListPropertyValueToArray(val);
					}

					for (var i = 0; i < chboxSpans.length; i++) 
					{
						checkbox = chboxSpans[i].getElementsByTagName("input")[0];
						@if (propDataType == "mv_list")
						{
							<text>
								var isFound = false;
								for (var j = 0; j < tmpArr.length; j++)
								{
									if (chboxSpans[i].attributes['name'].value == tmpArr[j]) {
										isFound = true;
										break;
									}
								}
								checkbox.checked = isFound;
							</text>
						}
						else
						{
							<text>
								checkbox.autoUncheck = true; @{/* to avoid infinite looping when unchecking checkbox automatically*/}
								checkbox.checked = ((val == checkbox.value) ? true : false);
								checkbox.autoUncheck = false;
							</text>
						}
					}
					@{
						// Field event "onChange" corresponds to checkbox event "onpropertychange"
						var methodCode = MethodsExUtils.GetEventHandlerCode(Model.FieldNode, "onchange", false, "");
						if (!String.IsNullOrEmpty(methodCode))
						{
							if (Model.FieldType == FieldType.Radio)
							{
								<text>
									if (event.srcElement.value != "")
									{
										@Html.Raw(methodCode)
										/*Fix for mistakes with missed closing comments brackets*/
									}
								</text>
							}
							else
							{
								@Html.Raw(methodCode)
							}
						}
					}
					return true;
				}

				@if (!String.IsNullOrEmpty(propNm)) 
				{
					@:if (observersHash.getElementById("@(propNm)_system"))
					@:	observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", @(funcName));
				}
			</script>
		}
		
		<script type="text/javascript">
			function expression_@(fieldId)_setExpression(isEditMode) 
			{
				@if (Model.Mode != "edit_form" && Model.Mode != "view_form" 
					&& !readOnlyProp)
				{
					<text>
						var elems = document.getElementsByName("@(fieldId)name");
						if (elems)
						{
							for (var i = 0; i < elems.length; i++)
							{
								elems[i].disabled = !isEditMode;	
							}   
						}
					</text>
				}
			}
			expression_@(fieldId)_setExpression(document.isEditMode);
		</script>
	}
}

