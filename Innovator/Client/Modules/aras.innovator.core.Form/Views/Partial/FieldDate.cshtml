@using System
@using System.Text
@using Models.Helpers
@using FieldType = Models.AML.Enums.FieldType
@model Models.FieldRenderModel

@{
	var fieldId = Model.FieldNode.Id;
	var fieldNm = Model.FieldNode.Name;
	var handlerName = "hoverHandler_" + fieldId;
	var propNm = String.Empty;

	if (!Model.PropertyNode.IsNull)
	{
		propNm = Model.PropertyNode.Name;
	}

	// Field properties
	var fieldSizeInfo = MethodsExUtils.UiGetFieldSizeInfo(Model.FieldNode);
	var readOnlyProp = MethodsExUtils.UiIsFieldReadOnly(Model.FieldNode, Model.PropertyNode);
	var tabIndex = Model.FieldNode.TabStop ? Model.FieldNode.TabIndex.Value : "-1";
	var maxLength = Model.PropertyNode.StoredLength.IsNull ? String.Empty : "maxlength=\"" + Model.PropertyNode.StoredLength.Value + "\" ";
	var isDisabled = (readOnlyProp && Model.Mode != "search") ? " disabled " : String.Empty;

	// Event functions
	var userOnClick = String.Empty;
	var userOnBlur = String.Empty;
	var userOnChange = String.Empty;
	var userOnKeyDown = String.Empty;

	// Calendar vars
	var calendarFunctionName = "system_" + fieldId + "_showCalendar";

	var onClickCode = String.Empty;
	var onKeyDownCode = String.Empty;
	var onChangeCode = String.Empty;
	var onBlurCode = String.Empty;

	var patternFromNode = !Model.PropertyNode.Pattern.IsNull ? Model.PropertyNode.Pattern.Value : String.Empty;

	var generatedAttributes = new StringBuilder();
	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		if (!Model.PropertyNode.IsNull)
		{
			var onChangeHandler = MethodsExUtils.GenerateOnChangeHandler(FieldType.Date, Model.FieldNode, Model.PropertyNode, Model.Mode);
			onChangeCode = onChangeHandler.OnChangeCode;
			onBlurCode = onChangeHandler.OnBlurCode;
			userOnBlur = onChangeHandler.UserOnBlurCode;
			userOnChange = onChangeHandler.UserOnChangeCode;
		}

		// Field onClick handler
		var handlerCode = MethodsExUtils.GetEventHandlerCode(Model.FieldNode, "onclick", true, "return true;\r\n");
		if (handlerCode != "return true;\r\n")
		{
			var funcName = "user_" + fieldId + "_onclick";
			userOnClick = @"<script type=""text/javascript"">
									function " + funcName + @"(event) 
									{ 
												" + handlerCode
										   + "/*Fix for mistakes with missed closing comments brackets*/" + @"
									}
								</script>";
			onClickCode += "return " + funcName + "(event);";
		}

		// Field onKeyDown handler
		var userOnKeyDownFunc = "user$" + fieldId + "$onkeydown";
		userOnKeyDown = "\r\n" +
						@"<script type=""text/javascript"">
								function " + userOnKeyDownFunc + @"(event) {
								" + MethodsExUtils.GetEventHandlerCode(Model.FieldNode, "onkeydown", false, "return true;") + @"	
								}
							  </script>";
		onKeyDownCode = @"var userHandlerResult = " + userOnKeyDownFunc + @"(event);
							  if (!userHandlerResult) return false;
							  if (event.keyCode == 113) {
								if (!event.srcElement) event.srcElement = event.target;
								event.cancelBubble = true;
								if (event.preventDefault) event.preventDefault();" + "\r\n"
							+ calendarFunctionName + @"(event);
								return false;}
							  else if (event.keyCode == 13) {
								return false;}";

		if (Model.Mode != "search")
		{
			generatedAttributes.Append(MethodsExUtils.AssignFieldEventEx(Model.FieldNode, "onchange,onblur", null));
		}
	}


	var isEventsNeeded = Model.Mode != "edit_form" && Model.Mode != "view_form" && Model.Mode != "search";
	var isReadOnly = !isEventsNeeded ? "readonly" : String.Empty;
	var cls = BrowserHelper.GetClassForInputImage(Model.BrowserType, true);
	var onMouseScript = isEventsNeeded ? "onmouseover=\"" + handlerName + "(true)\" onmouseout=\"" + handlerName + "(false)\" onclick=\"" + calendarFunctionName + "(event);\"" : String.Empty;

	<input type="text" id="@(fieldId)" aria-labelledby="@(fieldId)_label" name="@(fieldNm)" class="sys_special_readonly_prop sys_f_input_calendar @(fieldNm)" @Html.Raw(fieldSizeInfo.Attribute) style="@(fieldSizeInfo.Style)" @(isReadOnly) @(isDisabled) @Html.Raw(maxLength)
		@if (!String.IsNullOrEmpty(onChangeCode))
		{
			@:onchange="
				@:@Html.Raw(onChangeCode)
			@:"	
		}
		@if (!String.IsNullOrEmpty(onBlurCode))
		{
			@:onblur="
				@:@Html.Raw(onBlurCode)"	
		}
		@if (!String.IsNullOrEmpty(onClickCode))
		{
			@:onclick="
				@:@Html.Raw(onClickCode)"	
		}
		@if (!String.IsNullOrEmpty(onKeyDownCode))
		{
			@:onkeydown="@Html.Raw(onKeyDownCode)"	
		} @Html.Raw(generatedAttributes.ToString()) tabindex="@(tabIndex)"/><input tabindex="-1" class="sys_f_input_image @Html.Raw(cls)" type="image" id="@(fieldId)_img" @Html.Raw(onMouseScript) align="absmiddle" border="0" unselectable="on" src="../images/calendar.svg" aria-hidden="true" value="" />
			   
	if (isEventsNeeded)
	{
		<script type="text/javascript">
			function @(handlerName)(isMouseOver)
			{
				var imageDom = document.getElementById("@(fieldId)_img");
				if (isMouseOver) imageDom.setAttribute("src", "../images/calendar-hover.svg");
				else imageDom.setAttribute("src", "../images/calendar.svg");
			}
		</script>
		<script type="text/javascript">
			function @(calendarFunctionName)(event)
			{
				@if (!readOnlyProp)
				{
					<text>
						var dateField = document.getElementById("@(fieldId)");
						<!-- code marker for DateField2 -->
						<!-- code marker start -->
						var pattern = aras.getDotNetDatePattern("@(patternFromNode)");
						if (!pattern) {
							pattern = "";
						}

						<!-- code marker end -->
						var wndRect = aras.uiGetElementCoordinates(dateField);
						var topWnd = aras.getMostTopWindowWithAras(window);
						var param = {
							date: dateField.value,
							format: pattern,
							aras: aras
						};
						param.type = "Date";
						var dateDialog = (topWnd.main || topWnd).ArasModules.Dialog.show("iframe", param);
						dateDialog.move(wndRect.left - wndRect.screenLeft, wndRect.top - wndRect.screenTop);

						//Magic behaviour for IE11 caused by impossibility show modalWindow from resolved promise
						//Issue causes when calling confirm dialog with modal realization (e.g. in Solutions)
						//TODO: Remove when ModalDialogHelper will be removed completely from Innovator
						if (aras.Browser && aras.Browser.isIe() && aras.Browser.getMajorVersionNumber() === 11) {
							dateDialog.dialogNode.addEventListener('close', function(evt) {
								var newDate = dateDialog.returnValue;
								if (newDate !== undefined) {
									var prevVal = dateField.value;
									dateField.value = newDate;
									if (prevVal !== dateField.value) {
										if (window.handleItemChange) {
											handleItemChange("@(propNm)", dateField.value, "date", pattern);
										}
										var e = document.createEvent('HTMLEvents');
										e.initEvent('change', false, false);
										dateField.dispatchEvent(e);
									}
								}
							});
							return;
						}
						dateDialog.promise.then(function (newDate) {
							if (newDate != undefined) {
								var prevVal = dateField.value;
								dateField.value = newDate;
								if (prevVal != dateField.value) {
									if (window.handleItemChange) {
										handleItemChange("@(propNm)", dateField.value, "date", pattern);
									}
									if (dateField.fireEvent) {dateField.fireEvent("onchange");}
									else if (dateField.dispatchEvent) {var e = document.createEvent('HTMLEvents');e.initEvent('change', false, false);dateField.dispatchEvent(e);}
								}
							}
						});
					</text>
				}
			}
		</script>
		@Html.Raw(userOnClick)
		@Html.Raw(userOnKeyDown) 
	}	
}

@if (Model.Mode != "edit_form" && Model.Mode != "view_form")
{
	@Html.Raw(userOnChange)

	@Html.Raw(userOnBlur)

	var funcName = "system_" + fieldId + "_value";
	@:
	<script type="text/javascript">
		function @(funcName)(event) 
		{
			if (!event) event = window.event;

			if (!event.srcElement) event.srcElement = event.target;

			if (event.propertyName != "value")  return true;

			var ctrlElem = event.srcElement;
			if (!ctrlElem) return true;

			var input = document.getElementById("@(fieldId)");
			if (!input) return true;

			var val = ctrlElem.value;
			if (val) {
				<!-- code marker for DateField -->
				<!-- code marker start -->
				var pattern = aras.getDotNetDatePattern("@(patternFromNode)");
				if (!pattern) {
					pattern = "";
				}
				var neutralDate = aras.convertToNeutral(val, "date", pattern);
				val = aras.convertFromNeutral(neutralDate, "date", pattern);
				<!-- code marker end -->
			}

			input.value = val;

			@{
				@: input.value=val; 
			}
			return true;
		}

		@if (!Model.PropertyNode.IsNull)
		{
			@:
			@:if (observersHash.getElementById("@(propNm)_system"))
			@:	observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", @(funcName));
		}
	</script>
}
<script type="text/javascript">
	function expression_@(fieldId)_setExpression(isEditMode) 
	{
		@if (Model.Mode != "edit_form" && Model.Mode != "view_form" && !readOnlyProp)
		{
			<text>
				var field = document.getElementById('@(fieldId)');
				var fieldImg = document.getElementById('@(fieldId)_img');
				fieldImg.disabled = field.disabled = !isEditMode;
				fieldImg.setAttribute("src", (isEditMode ? "../images/calendar.svg" : "../images/calendar-disabled.svg"));
			</text>	
		}
		var field = document.getElementById('@(fieldId)');
		if (!isEditMode) {field.className = field.className.replace("sys_special_readonly_prop", "sys_special_readonly_prop_disabled");} 
		else {field.className = field.className.replace("sys_special_readonly_prop_disabled", "sys_special_readonly_prop");}
	}
	setTimeout('expression_@(fieldId)_setExpression(document.isEditMode)', 1);
</script>
