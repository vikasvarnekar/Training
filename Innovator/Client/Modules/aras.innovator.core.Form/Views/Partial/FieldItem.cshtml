@using System
@using System.Text
@using Models.AML.Enums
@using Models.Helpers
@model Models.FieldRenderModel
@{
	var languagesCount = 1;
	if (Model.IsMLString)
	{
		languagesCount = Model.AllLanguages.Count;
	}

	var fieldId = Model.FieldNode.Id;
	var fieldNm = Model.FieldNode.Name;

	var propNm = String.Empty;
	if (!Model.PropertyNode.IsNull)
	{
		propNm = Model.PropertyNode.Name;
	}

	StringBuilder expressionFunctionCode = new StringBuilder();
	expressionFunctionCode.AppendLine("var itemSpan = document.getElementById('" + fieldId + "');");

	var dsName = String.Empty;

	if (!Model.PropertyNode.IsNull && !Model.IsMLString)
	{
		var ds = Model.PropertyNode.DataSource;
		if (ds != null)
		{
			dsName = ds.Name;
		}
	}

	var isForeign = false;

	var onF2DownCode = String.Empty;
	var userOnBlurCode = String.Empty;
	var userOnChangeCode = String.Empty;
	var userOnClickCode = String.Empty;
	var userOnKeyDownCode = String.Empty;

	// Generated field attributes
	var tabIndex = Model.FieldNode.TabStop ? Model.FieldNode.TabIndex.Value : "-1";
	tabIndex = String.IsNullOrEmpty(tabIndex) ? "" : "tabindex=\"" + tabIndex + "\"";
	var fieldSizeInfo = MethodsExUtils.UiGetFieldSizeInfo(Model.FieldNode);
	var readOnlyProp = MethodsExUtils.UiIsFieldReadOnly(Model.FieldNode, Model.PropertyNode);
	var isDisabled = (readOnlyProp && Model.Mode != "search" && !Model.PropertyNode.IsNull) ? " DISABLED " : String.Empty;
	var maxLength = (Model.PropertyNode.IsNull || Model.PropertyNode.StoredLength.IsNull) ? String.Empty : "maxlength=\"" + Model.PropertyNode.StoredLength.Value + "\" ";
	var assignedFieldEvents = String.Empty;


	var hasDataSource = false;

	// Span events for !print mode
	var onClickSpanEvent = String.Empty;
	var onChangeSpanEvent = String.Empty;
	var onBlurSpanEvent = String.Empty;

	// Input text events for !print mode
	var onBlurInputEvent = String.Empty;
	var onFocusInputEvent = String.Empty;
	var onKeyDownInputEvent = String.Empty;
	var onChangeInputEvent = String.Empty;
	var onSelectInputEvent = String.Empty;

	var inputReadOnly = String.Empty;

	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		var onF2DownFunc = "system$" + fieldId + "$OnF2Down";

		if (Model.Mode != "search")
		{
			assignedFieldEvents = MethodsExUtils.AssignFieldEventEx(Model.FieldNode, "onclick,onkeydown,onchange,onblur", null);
		}

		var userOnClickFunc = "user$" + fieldId + "$onclick";
		userOnClickCode =
		@"<script type=""text/javascript"">
			function " + userOnClickFunc + @"(event)
			{
				" + MethodsExUtils.GetEventHandlerCode(Model.FieldNode, "onclick", false, "return true;") + @"
			}
		</script>";

		onClickSpanEvent = @"var ures=" + userOnClickFunc + @"(event);
							if (ures)
							{
							";

		if (!Model.PropertyNode.IsNull && !String.IsNullOrEmpty(propNm) && !String.IsNullOrEmpty(dsName))
		{
			onClickSpanEvent += @"if (!event) event = window.event;
							  if (!event.srcElement) event.srcElement = event.target;
							  var tgName=event.srcElement.tagName;
							  var srcElem = event.srcElement;
							  var propNd=window.document.item.selectSingleNode('" + propNm + @"'); 
							  if (tgName=='SPAN' && (!window.document.isEditMode || ((srcElem.style.visibility != 'hidden') && (srcElem.style.display == 'inline'))) && propNd && propNd.getAttribute('discover_only')!='1')
							  {
								var itm = aras.getItemById('" + dsName + "',observersHash.getElementById('" + propNm + @"_system').value,0);
								if (itm) aras.uiShowItemEx(itm,undefined);
							  }
							  ";
			if (!readOnlyProp || Model.Mode == "search")
			{
				hasDataSource = true;
			}
		}
		onClickSpanEvent += @"}";

		var userOnKeyDownFunc = "user$" + fieldId + "$onkeydown";
		userOnKeyDownCode =
			@"<script type=""text/javascript"">
				function " + userOnKeyDownFunc + @"(event)
				{
					" + MethodsExUtils.GetEventHandlerCode(Model.FieldNode, "onkeydown", false, "return true;") + @"
				}
			  </script>";

		var doAddOnkeydown = false;

		if (hasDataSource)
		{
			doAddOnkeydown = true;
			onF2DownCode = @"<script type=""text/javascript"">
				function " + onF2DownFunc + @"(king_span)
				{
				  var input = king_span.querySelector(" + "\"[id='" + fieldId + "_input']\");" +
				  @"
				  input.dialogIsShown = true;
				  var params = {aras:window.aras,itemtypeName:'" + dsName + @"', itemContext:document.item, sourceItemTypeName:document.item.getAttribute('type'), sourcePropertyName:'" + propNm + @"'};
				  var callback = function(dlgRes) {
				   input.dialogIsShown = false;
				   if (dlgRes == undefined) {
					input.focus();
					return true;
				   }
				   bFromSearch = true;
				   var prevVal = king_span.value;
				   if (dlgRes.itemID) {
					if (window.handleItemChange) handleItemChange('" + propNm + @"', dlgRes." + (Model.Mode == "search" ? "keyed_name" : "item") + @");
					if (prevVal != dlgRes.itemID) {
					  if (input.fireEvent) {
						input.fireEvent('onchange');
					  }
					  else {
						var eventObj = document.createEvent('Event');
						eventObj.initEvent('change', true, true);
						input.dispatchEvent(eventObj);
					  }
					}
				   }
				   else
				   {
					if (window.handleItemChange) handleItemChange('" + propNm + @"','');
					if (prevVal != '') {
					  if (input.fireEvent) {
						 input.fireEvent('onchange');
					  }
					  else {
						var eventObj = document.createEvent('Event');
						eventObj.initEvent('change', true, true);
						input.dispatchEvent(eventObj);
					  }
					}
					input.focus();
				   }
				  };
					var topWnd = aras.getMostTopWindowWithAras(window);
					params.type = 'SearchDialog';
					(topWnd.main || topWnd).ArasModules.MaximazableDialog.show('iframe', params).promise.then(callback);
				}
				</script>";
		}
		else if (Model.IsMLString && languagesCount > 1)
		{
			doAddOnkeydown = true;
			isForeign = !Model.PropertyNode.ForeignProperty.IsNull;

			const string getItemInfoCode = @"
			function GetForeignItemInfo(item, propNm)
			{
				var ret = new Array();
				// 1. get Type of item
				var it_name = item.getAttribute('type');
				var itemType = aras.getItemTypeForClient(it_name, ""name"").node;

				var _iFP = itemType.selectNodes(""Relationships/Item[name='"" + propNm + ""']"");
				_iFP = _iFP[0];
				var topWnd = aras.getMostTopWindowWithAras(window);
				var iFP = new topWnd.Item();
				iFP.loadAML(_iFP.xml);
				// is foreign?
				var data_type = iFP.getProperty(""data_type"");
				if (data_type != ""foreign"")
				{
					var ret = new Array();
					ret['item'] = item;
					ret['propNm'] = propNm;
					return ret;
				}
				var tmp_item = new topWnd.Item();
				tmp_item.loadAML(item.xml);
				item = tmp_item;
				/* get foreign item	*/
				// get DataSouce field name of the propNm
				// <foreign_property keyed_name=""ms"" type=""Property"">538B691651294F569D839C729C3B4FD1</foreign_property>
				var ds_field_name = iFP.getPropertyAttribute(""data_source"", ""keyed_name"");
				var ds_item_id = item.getProperty(ds_field_name);

				var tmp = itemType.selectNodes(""Relationships/Item[name='"" + ds_field_name + ""']"");
				tmp = tmp[0];
				var iFPItemType = new topWnd.Item();
				iFPItemType.loadAML(tmp.xml);
				var f_it_name = iFPItemType.getPropertyAttribute(""data_source"", ""keyed_name"");

				var qry = new topWnd.Item();
				qry.setType(f_it_name);
				qry.setAction('get');
				qry.setProperty('id', ds_item_id);
				var result = qry.apply();
				if (result.isError()) return;
				var f_item = result.getItemByIndex(0).node;
				/* get foreign item property name */
				//2. get propNm fp item <foreign_property keyed_name=""ms"" type=""Property"">538B691651294F569D839C729C3B4FD1</foreign_property>
				var f_item_propNm = iFP.getPropertyAttribute(""foreign_property"", ""keyed_name"");

				return GetForeignItemInfo(f_item, f_item_propNm);
			};
			";
			onF2DownCode = @"<script type=""text/javascript"">" +
						   getItemInfoCode +
						   @"function " + onF2DownFunc + @"(king_span)
								{
									var fieldToFocus = document.getElementById(""" + fieldId + @"_img"");
									fieldToFocus.focus();
									var isForeign = " + Json.Encode(isForeign) + @";
									var resolved_item = document.item;
									var resolved_propNm = """ + propNm + @""";
									if(isForeign)
									{
										var aItemInfo = GetForeignItemInfo(resolved_item, """ + propNm + @""");
										if (!aItemInfo)
											return;
										resolved_item = aItemInfo[""item""];
										resolved_propNm  = aItemInfo[""propNm""];
									}
									var input = king_span.querySelector(""[id='" + fieldId + @"_input']"");

<!-- code marker for onF2DownFunc -->
<!-- code marker start -->
									aras.getItemPropertyTranslations(document.item, resolved_propNm)
										.then(function(translations) {
											const topWnd = aras.getMostTopWindowWithAras(window);

											input.dialogIsShown = true;
											return topWnd.ArasCore.Dialogs.multiLingual(translations, {
												maxLength: '" + Model.PropertyNode.StoredLength + @"',
												readOnly: isForeign || !document.isEditMode
											});
										})
										.then(function(updatedTranslations) {
											input.dialogIsShown = false;
											const isUpdated = aras.setItemPropertyTranslations(
												document.item,
												resolved_propNm,
												updatedTranslations,
												document.applyChanges2All
											);

											if (!isUpdated) {
												return;
											}

											const prevVal = input.value;
											const newVal = aras.getItemProperty(document.item, """ + propNm + @""");
											aras.setItemProperty(document.item, """ + propNm + @""", prevVal);
											if (window.handleItemChange) {
												handleItemChange('" + propNm + @"', newVal);
											}
											if (input.fireEvent) {
												input.fireEvent('onchange');
											} else {
												const eventObj = document.createEvent('Event');
												eventObj.initEvent('change', true, true);
												input.dispatchEvent(eventObj);
											}
											input.focus();
										});
<!-- code marker end -->
									return true;
								}
								</script>";
		}

		// +++ generate onchange and onblur event handlers
		var onchangeCode = MethodsExUtils.GenerateOnChangeHandler(FieldType.Item, Model.FieldNode, Model.PropertyNode, Model.Mode);
		onChangeSpanEvent = onchangeCode.OnChangeCode;
		onBlurSpanEvent = onchangeCode.OnBlurCode;

		userOnBlurCode = onchangeCode.UserOnBlurCode;
		userOnChangeCode = onchangeCode.UserOnChangeCode;
		// --- generate onchange and onblur event handlers

		if (hasDataSource)
		{
			onBlurInputEvent = @"if (!this.parentNode.onblur)
								{
									return true;
								}
								this.onblur = this.parentNode.onblur;
								if (this.fireEvent) this.fireEvent('onblur');else 
								{var eventObj = window.document.createEvent('Event');
									eventObj.initEvent('blur', true, true);
									this.dispatchEvent(eventObj);};";

			onFocusInputEvent = @"if (!this.parentNode.onfocus)
								{
									return true;
								}
								this.onfocus = this.parentNode.onfocus;
								if (this.fireEvent) this.fireEvent('onfocus');else 
								{var eventObj = window.document.createEvent('Event');
									eventObj.initEvent('focus', true, true);
									this.dispatchEvent(eventObj);};";
		}
		else
		{
			onBlurInputEvent = @"if (!this.parentNode.onblur)
								{
									this.onblur = null;
									return true;
								}
								this.onblur = this.parentNode.onblur;
								if (this.fireEvent) this.fireEvent('onblur');else 
								{var eventObj = window.document.createEvent('Event');
									eventObj.initEvent('blur', true, true);
									this.dispatchEvent(eventObj);};";

			onFocusInputEvent = @"if (!this.parentNode.onfocus)
								{
									this.onfocus = null;
									return true;
								}
								this.onfocus = this.parentNode.onfocus;
								if (this.fireEvent) this.fireEvent('onfocus'); else 
								{var eventObj = window.document.createEvent('Event');
									eventObj.initEvent('focus', true, true);
									this.dispatchEvent(eventObj);};";
		}
		if (doAddOnkeydown)
		{
			onKeyDownInputEvent = @"if(event.keyCode == 113) {
										if (!event.srcElement) event.srcElement = event.target;
										event.cancelBubble = true;
										if(event.preventDefault) event.preventDefault();
										" + onF2DownFunc + @"(event.srcElement.parentNode);return false;}else if (event.keyCode == 13) return false;";
		}
		else
		{
			onKeyDownInputEvent = @"if (event.keyCode == 13) return false;";
		}

		/*Need to erase parent onchange handler after copying because dispatchEvent leads to event bubbling and as result onchange method is called several times*/
		onChangeInputEvent = @"if (!this.parentNode.onchange) 
								{
									this.onchange = null;
									return true;
								}
								this.onchange = this.parentNode.onchange;
								this.parentNode.onchange = '';
								if (this.fireEvent) this.fireEvent('onchange');else 
								{var eventObj = window.document.createEvent('Event');
								 eventObj.initEvent('change', true, true);
								 this.dispatchEvent(eventObj);};";

		onSelectInputEvent = @"if (!this.parentNode.onselect) 
								{
									this.onselect = null;
									return true;
								}
								this.onselect = this.parentNode.onselect;
								if (this.fireEvent) this.fireEvent('onselect');else 
								{var eventObj = window.document.createEvent('Event');
								 eventObj.initEvent('select', true, true);
								 this.dispatchEvent(eventObj);};";

		if (Model.Mode != "search" && !Model.IsMLString && !readOnlyProp)
		{
			expressionFunctionCode.AppendLine("var field = document.getElementById('" + fieldId + @"_input');");
			expressionFunctionCode.AppendLine("if (field) field.style['display'] = isEditMode ? 'inline' : 'none';");
		}
		else if (Model.IsMLString)
		{
			if (readOnlyProp)
			{
				inputReadOnly = "readOnly='true'";
			}
		}

		fieldSizeInfo.Style = ((readOnlyProp && !Model.IsMLString) ? "display:none; " : "") + fieldSizeInfo.Style;
	}
}

@{
	if (Model.Mode == "edit_form" || Model.Mode == "view_form")
	{
		@:<span id="@(fieldId)" name="@(fieldNm)" class="@(fieldNm)"><input aria-labelledby="@(fieldId)_label" type="text" @Html.Raw(fieldSizeInfo.Attribute) style="@(fieldSizeInfo.Style)" READONLY @Html.Raw(isDisabled) @Html.Raw(maxLength) @Html.Raw(tabIndex) /> 
	}
	else 
	{
		@:<span id="@(fieldId)" name="@(fieldNm)" class="@(fieldNm)" @Html.Raw(assignedFieldEvents) 
		@:		onclick="
		@:				@Html.Raw(onClickSpanEvent)"
		@:		onchange="
		@:				@Html.Raw(onChangeSpanEvent)"
		@:		onblur="
		@:				@Html.Raw(onBlurSpanEvent)" >
			<input name="@(fieldNm)" type="text" class="@(fieldNm)" aria-labelledby="@(fieldId)_label" id="@(fieldId)_input" @Html.Raw(inputReadOnly) 
				@if (hasDataSource)
				{
					@:onblur = "
					@:@Html.Raw(onBlurInputEvent)"
					@:onfocus = "
					@:@Html.Raw(onFocusInputEvent)"
				}
				else
				{
					@:onfocus = "
					@:@Html.Raw(onFocusInputEvent)"
					@:onblur = "
					@:@Html.Raw(onBlurInputEvent)"
				}
				onkeydown = "@Html.Raw(onKeyDownInputEvent)"
				onchange = "
							@Html.Raw(onChangeInputEvent)" 
				onselect = "
							@Html.Raw(onSelectInputEvent)" 
				@Html.Raw(fieldSizeInfo.Attribute) style="@(fieldSizeInfo.Style)" @Html.Raw(maxLength) @Html.Raw(isDisabled) @Html.Raw(tabIndex) />
	}

	if (!(Model.IsMLString && languagesCount == 1))
	{
		if ((isForeign && Model.IsMLString) || !readOnlyProp || Model.Mode == "search")
		{
			var ellipsisStyle = "style=\"";
			if (Model.Mode != "edit_form" && Model.Mode != "view_form")
			{
				if (Model.IsMLString)
				{
					ellipsisStyle += "display:'inline';";
				}
				else
				{
					expressionFunctionCode.AppendLine(@"var field = document.getElementById('" + fieldId + @"_img');");
					expressionFunctionCode.AppendLine("if (field) field.style['display'] = isEditMode ? 'inline' : 'none';");
				}
			}
			ellipsisStyle += "cursor:pointer;\"";
			var cls = BrowserHelper.GetClassForInputImage(Model.BrowserType, false);
			<input class="sys_f_input_image @Html.Raw(cls)" aria-labelledby="@(fieldId)_label" type="image" id="@(fieldId)_img" onclick="system$@(fieldId)$OnF2Down(this.parentNode ? this.parentNode : (event.srcElement ? event.srcElement.parentNode : event.target.parentNode)); return false;" align="absmiddle" border="0" unselectable="on" src="../images/Ellipsis.svg" @Html.Raw(ellipsisStyle) />
		}
	}
	if (Model.Mode != "search" && !Model.IsMLString)
	{
		var linkStyle = "style=\"\"";
		string linkClass;
		if (!readOnlyProp)
		{
			//content += 'display:expression(document.isEditMode?\'none\':\'inline\');';
			expressionFunctionCode.AppendLine("var field = document.getElementById('" + fieldId + @"_span');");
			expressionFunctionCode.AppendLine("if (field) field.style['display'] = isEditMode ? 'none' : 'inline';");
		}
		else
		{
			linkStyle = "style=\"display:inline;\"";
		}


		linkClass = " class=\"sys_item_link " + fieldNm + "\"";
		
		<span id='@(fieldId)_span' @Html.Raw(linkStyle) @Html.Raw(linkClass)></span> 
		
	}

			@:</span> 

	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
			@Html.Raw(onF2DownCode)
			@:
			@Html.Raw(userOnClickCode)
			@:
			@Html.Raw(userOnKeyDownCode)
			@:
			@Html.Raw(userOnChangeCode)
			@:
			@Html.Raw(userOnBlurCode)
	}
	if (!String.IsNullOrEmpty(propNm) && Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		string funcName = "system_" + fieldId + "_value";
		if (!Model.IsMLString)
		{
			<script type="text/javascript">
				function @(funcName)(event) 
				{
					try {
						if (!event) event = window.event;

						if (!event.srcElement) event.srcElement = event.target;

						if (event.propertyName != "value")  return true;

						var ctrlElem = event.srcElement;
						if (!ctrlElem) return true;

						var itemSpan = document.getElementById("@(fieldId)");
						if (!itemSpan) return true;

						if (itemSpan.value == ctrlElem.value)  return true;

						var val = ctrlElem.value;
						itemSpan.value = val;

						@if (Model.Mode != "search")
						{
							<text>
							var keyedName;
							var keyedNameAttribute = document.item.selectSingleNode("@propNm/@@keyed_name");
							if (keyedNameAttribute) {
								keyedName = keyedNameAttribute.value;
							}
							if (!keyedName && val) {
								val = aras.getKeyedName(val, "@dsName");
							} else if (keyedName) {
								val = keyedName;
							}
							</text>
						}
						@{
							<text>
								var input = itemSpan.getElementsByTagName("input");
								if (input) input=input[0];
								if (input) input.value = val;
							</text>
						}
						if (itemSpan.getElementsByTagName("span")[0]) 
						{
							var discoverOnly = document.item.selectSingleNode('@(propNm)');
							discoverOnly = (discoverOnly && discoverOnly.getAttribute('discover_only') == '1');
							itemSpan.getElementsByTagName("span")[0].style.textDecoration = (discoverOnly ? 'none' : 'underline');
							itemSpan.getElementsByTagName("span")[0].style.cursor = (discoverOnly ? 'auto' : 'pointer');
							itemSpan.getElementsByTagName("span")[0].innerHTML = aras.preserveTags(val);
						}
						return true;
					} catch (excep) {}}

				if (observersHash.getElementById("@(propNm)_system"))
					observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", @(funcName));
			</script>
		}
		else
		{
			<script type="text/javascript">
				function @(funcName)(event) 
				{
					if (!event) event = window.event;

					if (!event.srcElement) event.srcElement = event.target;

					if (event.propertyName != "value") return true;

					var ctrlElem = event.srcElement;
					if (!ctrlElem) return true;

					var itemSpan = document.getElementById("@(fieldId)");
					if (!itemSpan)  return true;

					var val = ctrlElem.value;
					@{
						<text>
							var input = itemSpan.getElementsByTagName("input");
							if (input) input = input[0];
							if (!input) return true;

							if (input.value == val) return true;

							input.value = val;
						</text>   
					}
					return true;
				}

				@if (!String.IsNullOrEmpty(propNm))
				{
					<text>
						if (observersHash.getElementById("@(propNm)_system"))
							observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", @(funcName));					  
					</text> 
				}
					
				@if (!readOnlyProp)
				{
					expressionFunctionCode.AppendLine("var field = document.getElementById('" + fieldId + @"_input');");
					expressionFunctionCode.AppendLine("if (!isEditMode) { field.setAttribute('readonly', 'readonly'); }");
					expressionFunctionCode.AppendLine("else { field.removeAttribute('readonly'); }");
				}
				document.getElementById("@(fieldId)").propNm = "@(propNm)";
			</script>
		}
	}
	
	<script type="text/javascript">
		function expression_@(fieldId)_setExpression(isEditMode) 
		{
			@Html.Raw(expressionFunctionCode.ToString())
		}
		setTimeout('expression_@(fieldId)_setExpression(document.isEditMode);', 1);
	</script>
}