@using Models.Helpers
@model Models.FieldRenderModel
@{
	var fieldId = Model.FieldNode.Id;
	var fieldNm = Model.FieldNode.Name;

	var propNm = String.Empty;
	if (!Model.PropertyNode.IsNull)
	{
		propNm = Model.PropertyNode.Name;
	}

	// Generated field attributes
	var tabIndex = Model.FieldNode.TabStop ? Model.FieldNode.TabIndex.Value : "-1";
	var readOnlyProp = MethodsExUtils.UiIsFieldReadOnly(Model.FieldNode, Model.PropertyNode);
	var isDisabled = (readOnlyProp && Model.Mode != "search") ? " DISABLED " : String.Empty;
	var assignedFieldEvents = String.Empty;
	var onClickEvent = String.Empty;

	// Generated code
	var userOnClick = String.Empty;

	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		if (Model.Mode != "search")
		{
			assignedFieldEvents = MethodsExUtils.AssignFieldEventEx(Model.FieldNode, "onclick, onchange", null);
		}
		var methodCode = MethodsExUtils.GetEventHandlerCode(Model.FieldNode, "onclick", true, "return true;\r\n");

		if (methodCode != "return true;\r\n")
		{
			var funcName = "user_" + fieldId + "_onclick";
			userOnClick = @"<script type=""text/javascript"">" + "\r\n" +
						  "function " + funcName + "(event) \r\n{\r\n"
									 + methodCode
									 + "\r\n/*Fix for mistakes with missed closing comments brackets*/\r\n"
									 + @"}
							</script>" + "\r\n";
			onClickEvent = "var ures=" + funcName + "(event);\r\n" +
							"if (ures) \r\n{\r\n";
		}

		if (!Model.PropertyNode.IsNull && !String.IsNullOrEmpty(propNm))
		{
			onClickEvent += "if (!window.document.isEditMode) return true;\r\n" +
				"var params = new Object();\r\n" +
				"params.aras = aras; params.type = 'ImageBrowser'\r\n" +
				"params.image = observersHash.getElementById('" + propNm + "_system').value;\r\n" +
				"var callback = function (newImg) { if (newImg && window.handleItemChange) { if(newImg == 'set_nothing') newImg = ''; handleItemChange('" + propNm + "',newImg);} }\r\n" +
				"var topWnd = aras.getMostTopWindowWithAras(window);\r\n" +
				"(topWnd.main || topWnd).ArasModules.Dialog.show('iframe', params).promise.then(callback);\r\n";
		}

		if (methodCode != "return true;\r\n")
		{
			onClickEvent += "}\r\n";
		}
	}
}
<span id="@(fieldId)" name="@(fieldNm)" class="sys_item_link @(fieldNm)" tabindex="@(tabIndex)" @Html.Raw(isDisabled)
	@Html.Raw(assignedFieldEvents)
	@Html.Raw(!String.IsNullOrEmpty(onClickEvent) ? "onclick=\"\r\n" + onClickEvent + "\"" : "")>
	@if (Model.Mode == "edit_form" || Model.Mode == "view_form")
	{<span class="sys_view_file_link">@(MethodsExUtils.GetResource(Model.ResourceNode, "ui_methods_ex.select_an_image"))</span><br><img style="cursor:pointer; max-width: 15px; max-height: 15px;" src="../images/Image.svg"/>
	}
	else
	{<span id='@(fieldId)_span' class="sys_view_file_link">@(MethodsExUtils.GetResource(Model.ResourceNode, "ui_methods_ex.select_an_image"))</span><br><img id='@(fieldId)_img' style="display:none;" />
	}
	@{
		if (Model.Mode != "edit_form" && Model.Mode != "view_form")
		{
			//User onClick
			@Html.Raw(userOnClick)
		}

		if (!String.IsNullOrEmpty(propNm) && Model.Mode != "edit_form" && Model.Mode != "view_form")
		{
			var imageWidth = Model.FieldNode.Width.IsNull ? "100%" : Model.FieldNode.Width.Value + "px";
			var imageHeight = Model.FieldNode.Height.IsNull ? "100%" : Model.FieldNode.Height.Value + "px";

			<script type="text/javascript">
				function system_@(fieldId)_value(event)
				{
					if (event.propertyName != "value") return true;
					var ctrlElem = event.srcElement;
					if (!ctrlElem) return true;
					var itemSpan = document.getElementById("@(fieldId)");
					if (!itemSpan) return true;
					if (itemSpan.value == ctrlElem.value) return true;
					var val = ctrlElem.value;
					if (val.toLowerCase().indexOf("vault:\/\/\/\?fileid=") == 0) {
						var fileId = val.replace(/vault:\/\/\/\?fileid=/i, "");
						val = aras.IomInnovator.getFileUrl(fileId, aras.Enums.UrlType.SecurityToken);
					}

					itemSpan.value = val;
					var img = itemSpan.getElementsByTagName("img")[0];
					if (!val) {
						img.style.display = "none";
						img.src = "about:blank";
					} 
					else {
						img.style.maxWidth = "@(imageWidth)";
						img.style.maxHeight = "@(imageHeight)";
						img.style.display = "inline";
						img.src = val;
					}
					return true;
				}

				if (observersHash.getElementById("@(propNm)_system"))
					observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", system_@(fieldId)_value);
				@{
			var methodCode = MethodsExUtils.GetEventHandlerCode(Model.FieldNode, "onchange", true, "return true;\r\n");
			if (methodCode != "return true;\r\n")
			{
				var funcName = "user_" + fieldId + "_onchange";
						<text>
							function @(funcName)(event)
							{
								if (event.propertyName != "value") return true;
								@Html.Raw(methodCode)
								/*Fix for mistakes with missed closing comments brackets*/
							}
							if (observersHash.getElementById("@(propNm)_system")) 
								observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", @(funcName));	
						</text>
			}
				}
			</script>
		}
		<script type="text/javascript">
			function expression_@(fieldId)_setExpression(isEditMode)
			{
                                var itemSpan = document.getElementById('@(fieldId)');
				@{
					<text>
						if (itemSpan)
						{
							@{/*itemSpan.style['visibility'] = "";*/}
						}	
					</text>
				}
				@if (Model.Mode != "edit_form" && Model.Mode != "view_form")
				{
					@:var field = document.getElementById('@(fieldId)_span');
					@:if (field) field.style['display'] = isEditMode ? 'inline': 'none';
					@:var field = document.getElementById('@(fieldId)_img');
					@:if (field) field.style['cursor'] = isEditMode ? 'pointer' : 'default';	
				}
			}
			setTimeout('expression_@(fieldId)_setExpression(document.isEditMode)', 1);
		</script>
	}
	<!-- code marker -->@{/*TODO: remove this code line together with "code marker" comment. Closing "</span>" tag below does not exist in old output. Thus it is marked by "code marker" for debug purposes*/}
</span>
