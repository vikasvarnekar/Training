@using Models.AML.ItemTypes
@using Models.Helpers
@model Models.FieldRenderModel

@{
	var fieldId = Model.FieldNode.Id;
	var propNm = String.Empty;

	if (!Model.PropertyNode.IsNull)
	{
		propNm = Model.PropertyNode.Name;
	}

	var tabIndex = Model.FieldNode.TabStop ? Model.FieldNode.TabIndex.Value : "-1";

	if (!Model.PropertyNode.IsNull)
	{
		var propDataType = Model.PropertyNode.DataType;
		var listId = Model.PropertyNode.DataSource.Value;
		if (listId != null)
		{
			var chboxes = MethodsExUtils.GetListValues(Model.ListNode, Model.FilterListNode, listId, propDataType);
			var vertOrient = (Model.FieldNode.Orientation.Value == "vertical");

			foreach (var item in chboxes)
			{
				var chbox = (Value) item;
				var val = chbox.ValueField;
				var label = chbox.Label.Value;

				if (chbox.Label.IsNull)
				{
					label = val;
				}

				var style = "position:relative;" + (propDataType == "color list" ? "background-color:" + val + ";" : "display:block;") + (vertOrient ? "float:left; clear:left;" : "float:none; clear:none;");
				
				<span id="@(fieldId)" name="@(val)" style="@(style)">
					<img value="@(val)" name="@(fieldId)name" src = "../images/Other/12x12_@(Model.FieldType)blue0.gif" onclick = "this.checked = (this.checked) ? false : true; this.dumm = 1;" tabindex="@(tabIndex)" onpropertychange="if (event.propertyName != 'dumm') return true; if (window.handleItemChange) handleItemChange('@(propNm)', (this.checked) ? this.value : '');"/>	
					@(label)
				</span>
			}
		}
		 
		var pattern = Model.PropertyNode.Pattern;
		if (propDataType == "filter list" && !pattern.IsNull)
		{
			var funcName = "system_" + fieldId + "_chboxes";
			<script type="text/javascript">
				function @(funcName)(event) {
					if (!event) {
						event = window.event;
					}
					if (!event.srcElement) {
						event.srcElement = event.target;
					}
					if (event.propertyName != "value") {
						return true;
					}
					var chboxSpans = aras.getElementsById(document, "span", "@(fieldId)");
					if (!chboxSpans) {
						return true;
					}
					var i, val, chboxNd;
					if (chboxSpans.length == undefined) {
						chboxSpans = new Array(chboxSpans);
					}
					for (i = 0; i < chboxSpans.length; i++) {
						chboxSpans[i].style.display = "none";
					}
					var filterVal = event.srcElement.value;
					var chboxNds = aras.getListFilterValues("@(listId)");
					if (filterVal != "") {
						chboxNds = aras.uiGetFilteredListEx(chboxNds,"^"+filterVal+"$");
					}
					for (i = 0; i < chboxNds.length; i++) {
						chboxNd = chboxNds[i];
						val = aras.getItemProperty(chboxNd, "value");
						if (chboxSpans.length > 1) {
							for (var z = 0; z < chboxSpans.length; z++) {
								if (chboxSpans[z].firstChild.value == val) {
									chboxSpans[z].style.display = "inline";
								}
							}	
						}
					}
					return true;
				}
				if (observersHash.getElementById("@(propNm)_system")) {
					observersHash.getElementById("@(pattern.Value)_system").attachEvent("onpropertychange", @(funcName));
				}
			</script>
			<script type="text/javascript">
				@{
					funcName = "system_" + fieldId + "_checked";
				} 
				function @(funcName)(event) {
					if (!event) {
						event = window.event;
					}
					if (!event.srcElement) {
						event.srcElement = event.target;
					}
					if (event.propertyName != "value") {
						return true;
					}
					var ctrlElem = event.srcElement;
					if (!ctrlElem) {
						return true;
					}
					var chboxSpans = aras.getElementsById(document, "span", "@(fieldId)");
					if (!chboxSpans) {
						return true;
					}
					var val = ctrlElem.value;
					if (chboxSpans[0].i_value == val) {
						return true;
					}
					var checkbox;
					chboxSpans[0].i_value = val;
					for (var i = 0; i < chboxSpans.length; i++) {
						checkbox = chboxSpans[i].getElementsByTagName("img")[0];
						checkbox.src = (val == checkbox.value) ? '../images/Other/12x12_' + type + 'blue1.gif' : '../images/Other/12x12_' + type + 'blue0.gif';
						checkbox.checked = (val == checkbox.value);
					}
					return true;
				}
				@{
					if (!Model.PropertyNode.IsNull)
					{
						<text>
							if (observersHash.getElementById("@(propNm)_system")) {
								observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", @(funcName));	
							}
						</text>
					}
				}
			</script>
		} 
	}
}