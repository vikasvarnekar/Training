@using System
@using Models.Helpers
@model Models.FieldRenderModel

@{
	var readOnlyProp = MethodsExUtils.UiIsFieldReadOnly(Model.FieldNode, Model.PropertyNode);
	var isDisabled = (readOnlyProp && Model.Mode != "search") ? " DISABLED " : String.Empty;
	var maxLength = Model.PropertyNode.StoredLength.IsNull ? String.Empty : "maxlength=\"" + Model.PropertyNode.StoredLength.Value + "\" ";
	var tabIndex = Model.FieldNode.TabStop ? Model.FieldNode.TabIndex.Value : "-1";

	var fieldId = Model.FieldNode.Id;
	var fieldNm = Model.FieldNode.Name;
	var propNm = String.Empty;
	if (!Model.PropertyNode.IsNull)
	{
		propNm = Model.PropertyNode.Name;
	}

	var displayLenghtItem = Model.FieldNode.DisplayLength;
	var css = String.Empty;
	var attributes = String.Empty;
	if (displayLenghtItem.IsNull)
	{
		var width = Model.FieldNode.Width;
		var height = Model.FieldNode.Height;
		css += height.IsNull ? "height: *;" : "height:" + height.Value + ";";
		css += width.IsNull ? "width: 115px;" : "width:" + width.Value + ";";	 
	}
	else
	{
		var fieldSizeInfo = MethodsExUtils.UiGetFieldSizeInfo(Model.FieldNode);
		attributes = fieldSizeInfo.Attribute;
		css += fieldSizeInfo.Style;
	}

	var assignedFieldEvents = String.Empty;
	var userOnClick = String.Empty;
	var onClickEvent = String.Empty;
 
	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		if (Model.Mode != "search")
		{
			assignedFieldEvents = MethodsExUtils.AssignFieldEventEx(Model.FieldNode, "onclick", null);
		}
		
		var methodCode = MethodsExUtils.GetEventHandlerCode(Model.FieldNode, "onclick", true, "return true;\r\n");
		if (methodCode != "return true;\r\n")
		{
			var funcName = "user_" + fieldId + "_onclick";
			userOnClick = @"<script type=""text/javascript"">
								function " + funcName + @"(event)
								{
										 " + methodCode + @"
										   /*Fix for mistakes with missed closing comments brackets*/
									}
							</script>";
			onClickEvent = @"var ures=" + funcName + @"(event); 
							 if (ures) 
							 {
							 " + (!String.IsNullOrEmpty(propNm) ?
								@"if (!window.document.isEditMode) return true;
								var currVal = observersHash.getElementById('" + propNm + @"_system').value;
								aras.showColorDialog(currVal).then(function (value) {
									var input = event.srcElement ? event.srcElement : event.target;
									if (value && window.handleItemChange)
									{
										handleItemChange('" + propNm + @"', value);
										if (currVal != value) {
											if (input.fireEvent) {
												input.fireEvent('onchange');
											}
											else {
												var eventObj = window.document.createEvent('Event');
												eventObj.initEvent('change', true, true);
												input.dispatchEvent(eventObj);
											}
										}
									}
								});
								" : String.Empty) + @"
							 }";
		}
	}
}

<input type="text" id="@(fieldId)" aria-labelledby="@(fieldId)_label" name="@(fieldNm)" @Html.Raw(attributes) style="cursor:pointer;@(css)" class="sys_special_readonly_prop" READONLY @Html.Raw(isDisabled) @Html.Raw(maxLength) @Html.Raw(assignedFieldEvents)
	   @if (!String.IsNullOrEmpty(onClickEvent))
	   {
			@:onclick="
			@:		@Html.Raw(onClickEvent)
			@:"   
	   } tabindex="@(tabIndex)" />@if (Model.Mode != "edit_form" && Model.Mode != "view_form") { var funcName = "system_" + fieldId + "_value"; <script type="text/javascript">
		function @(funcName)(event) 
		{
			if (event.propertyName != "value") return true;

			var ctrlElem = event.srcElement;
			if (!ctrlElem) return true;

			var input = document.getElementById("@(fieldId)");
			if (!input) return true;

			if (input.i_value == ctrlElem.value) return true;

			var val = ctrlElem.value;
			input.i_value = val;

			var bgc = (val && val.substring(0, 1) != '#') ? 'buttonface' : val;
			try {
				input.style.backgroundColor = bgc;
			}
			catch (excep) {
			}
			input.style.width = "130px";
			return true;
		}

		@if (Model.Mode != "edit_form" && Model.Mode != "view_form" && !String.IsNullOrEmpty(propNm))
		{
			@:if (observersHash.getElementById("@(propNm)_system"))
			@:	observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", @(funcName));
		}
	</script>
}

@if (Model.Mode != "edit_form" && Model.Mode != "view_form")
{
	@Html.Raw(userOnClick)
	@:
}
<script type="text/javascript">
	function expression_@(fieldId)_setExpression(isEditMode)
	{
		var field = document.getElementById('@(fieldId)');
		field.className = isEditMode ? "sys_special_readonly_prop" : "sys_special_readonly_prop_disabled";
	}
	setTimeout('expression_@(fieldId)_setExpression(document.isEditMode)', 1);
</script>