@using System
@using Models.AML.ItemTypes
@using Models.Helpers
@using FieldType = Models.AML.Enums.FieldType
@model Models.FieldRenderModel

@{
	var fieldId = Model.FieldNode.Id;
	var fieldNm = Model.FieldNode.Name;
	var propNm = Model.PropertyNode.Name;
	
	var dataType = Model.PropertyNode.DataType;

	var tabIndex = Model.FieldNode.TabStop ? Model.FieldNode.TabIndex.Value : "-1";

	var readOnlyProp = MethodsExUtils.UiIsFieldReadOnly(Model.FieldNode, Model.PropertyNode);

	// Also for the foreign properties we should show the fields in read only mode.
	var readOnly = (Model.Mode == "edit_form" || Model.Mode == "view_form" || (dataType == "foreign")) ? "readOnly" : String.Empty;

	var disabled = String.Empty;

	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		if (!Model.PropertyNode.IsNull)
		{
			if (readOnlyProp)
			{
				disabled = "disabled";
			}
			else
			{
				if (dataType == "sequence")
				{
					disabled = "readOnly value=\"Server Assigned\"";
					readOnly = String.Empty;
				}
			}
		}
	}

	var maxLength = !Model.PropertyNode.StoredLength.IsNull && Model.Mode != "edit_form" && Model.Mode != "view_form" ? "maxlength=\"" + Model.PropertyNode.StoredLength.Value + "\" " : String.Empty;
	MethodsExUtils.OnChangeHandlerModel onchangeCode = null;
	if (Model.Mode != "edit_form" && Model.Mode != "view_form" && !Model.PropertyNode.IsNull)
	{
		onchangeCode = MethodsExUtils.GenerateOnChangeHandler(Model.FieldType, Model.FieldNode, Model.PropertyNode, Model.Mode);
	}

	var fieldAddAttributes = (Model.FieldType == FieldType.Password) ? "pwdChanged=0 value=\"***\" autocomplete=\"off\"" : (Model.FieldType == FieldType.Text ? "onkeydown =\"if (event.keyCode == 13) return false;\"" : String.Empty);
	var inputType = SerializeUtils.GetFieldTypeName(Model.FieldType);
	var isPassword = inputType == "password";
	var fieldSizeInfo = MethodsExUtils.UiGetFieldSizeInfo(Model.FieldNode);
	var fieldStyle = (isPassword ? "font-size:10pt;" : String.Empty) + (fieldSizeInfo.Style != null ? fieldSizeInfo.Style : String.Empty);
	var className = fieldNm + (isPassword ? " aras-text-security" : String.Empty);
	if (isPassword) {
		inputType = "text";
	}

	var userOnBlur = String.Empty;
	var userOnChange = String.Empty;
	var userEventsForInput = String.Empty;

	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		var skipUserHanders = String.Empty;
		if (onchangeCode != null)
		{
			if (!readOnlyProp)
			{
				readOnlyProp = (Model.PropertyNode.DataType == "sequence" && Model.Mode != "search");
			}
			userOnBlur = onchangeCode.UserOnBlurCode;
			userOnChange = onchangeCode.UserOnChangeCode;
			skipUserHanders = "onchange,onblur";
		}

		if (Model.Mode != "search")
		{
			userEventsForInput = MethodsExUtils.AssignFieldEventEx(Model.FieldNode, skipUserHanders, null);
		}
	}

	<input type="@(inputType)" @Html.Raw(fieldAddAttributes) id="@(fieldId)" aria-labelledby="@(fieldId)_label" name="@(fieldNm)" class="@(className)" @Html.Raw(fieldSizeInfo.Attribute) style="@(fieldStyle)" @(readOnly) @Html.Raw(disabled) @Html.Raw(maxLength)
		@if (onchangeCode != null)
		{
			@:onchange="
			@:@Html.Raw(onchangeCode.OnChangeCode)"
			@:onblur="
			@:@Html.Raw(onchangeCode.OnBlurCode)"
		}
		@Html.Raw(userEventsForInput) @Html.Raw(String.IsNullOrEmpty(tabIndex) ? "" : "tabindex=\"" + tabIndex + "\"")/>

	if (Model.Mode != "edit_form" && Model.Mode != "view_form")
	{
		@Html.Raw(userOnChange)
		@:
		@Html.Raw(userOnBlur)
		@:
		var funcName = "system_" + fieldId + "_value";
		<script type="text/javascript">
			function @(funcName)(event) 
			{
				@if (Model.FieldType == FieldType.Password)
				{
					@:return true;
				}
				if (event.propertyName != "value") return true;
				var ctrlElem = event.srcElement;
				if (!ctrlElem) return true;
				var input = document.getElementById("@(fieldId)");
				if (!input) return true;
				var val = ctrlElem.value;
				@if (propNm == "current_state")
				{
				<text>
				aras.MetadataCache.GetLifeCycleStates().then(function (state) {
					const currentLifeCycleId = val;
					const foundLifeCycleState = state.value.find(lcNode => lcNode.id === currentLifeCycleId);

					if (!foundLifeCycleState) {
						return;
					}

					const { label, name } = foundLifeCycleState;

					const stateLabel = label || name;

					if (input.value === stateLabel) {
						return;
					}

					input.value = stateLabel;
				});
				</text>
				}
				else
				{
				<text>
				if (input.value == val) return true;
				input.value = val;
				</text>
				}
				return true;
			}
			@if (!Model.PropertyNode.IsNull)
			{
				@:if (observersHash.getElementById("@(propNm)_system"))
				@:	observersHash.getElementById("@(propNm)_system").attachEvent("onpropertychange", @(funcName));
			}
			document.getElementById("@(fieldId)").propNm="@(propNm)";
		</script>
	}

	<script type="text/javascript">
		function expression_@(fieldId)_setExpression(isEditMode)
		{
			@if (Model.Mode != "edit_form" && Model.Mode != "view_form" && !readOnlyProp)
			{
				@:var field = document.getElementById('@(fieldId)');
				@:if (!isEditMode) field.setAttribute('readonly', 'readonly');
				@:else field.removeAttribute('readonly');
			}	  
		}
		setTimeout('expression_@(fieldId)_setExpression(document.isEditMode)', 1);	
	</script>
}