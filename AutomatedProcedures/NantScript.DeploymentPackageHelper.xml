<?xml version="1.0" encoding="utf-8"?>
<project name="DeploymentPackageHelper">
	<!--
		Target takes several parameter:
		1) Nuget.Command.Line - command line which will be passed to NuGet.exe to execute once it set up NuGet source.
		2) Nuget.Fail.On.Error - (optional) boolean parameter identified whether target fail if an error occurs or not.
		3) Nuget.Output.File - (optional) a file where output from NuGet.exe will be redirected.
		4) Nuget.Publishing.Source - (optional) See Default.Settings.include
		5) Nuget.Uploader.Username - (optional) See Default.Settings.include
		6) Nuget.Uploader.Password - (optional) See Default.Settings.include
	-->
	<target name="Execute.Nuget.Command.Line.Using.Nuget.Source"
			description="Executes NuGet commands using the following sequence: set NuGet source, execute passed target and remove NuGet source afterwards.">
		<fail message="Target expects Nuget.Command.Line property to be passed. But it doesn't exist or empty" if="${not property::exists('Nuget.Command.Line') or string::get-length('Nuget.Command.Line') == 0}" />

		<property name="Nuget.Fail.On.Error" value="true" if="${not property::exists('Nuget.Fail.On.Error') or string::get-length(Nuget.Fail.On.Error) == 0}" />

		<trycatch>
			<try>
				<property name="Nuget.Source.Name" overwrite="false" value="packageSourceForCRT" />

				<exec program="${Path.To.Nuget}" verbose="true" workingdir="${Path.To.This.Git.Repository}">
					<arg value="sources" />
					<arg value="Add" />
					<arg value="-Name" />
					<arg value="${Nuget.Source.Name}" />
					<arg value="-Source" />
					<arg value="${Nuget.Publishing.Source}" />
					<arg value="-UserName" />
					<arg value="${Nuget.Uploader.Username}" />
					<arg value="-Password" />
					<arg value="${Nuget.Uploader.Password}" />
					<arg value="-ConfigFile" />
					<arg value="${Path.To.Nuget.Config}" />
				</exec>

				<choose>
					<when test="${property::exists('Nuget.Output.File') and string::get-length(Nuget.Output.File) > 0}">
						<exec program="${Path.To.Nuget}" commandline="${Nuget.Command.Line} -Source ${Nuget.Source.Name}" failonerror="${Nuget.Fail.On.Error}" output="${Nuget.Output.File}" verbose="true" workingdir="${Path.To.This.Git.Repository}" />
					</when>
					<otherwise>
						<exec program="${Path.To.Nuget}" commandline="${Nuget.Command.Line} -Source ${Nuget.Source.Name}" failonerror="${Nuget.Fail.On.Error}" verbose="true" workingdir="${Path.To.This.Git.Repository}" />
					</otherwise>
				</choose>
			</try>
			<finally>
				<exec program="${Path.To.Nuget}" verbose="true" workingdir="${Path.To.This.Git.Repository}">
					<arg value="sources" />
					<arg value="Remove" />
					<arg value="-Name" />
					<arg value="${Nuget.Source.Name}" />
					<arg value="-ConfigFile" />
					<arg value="${Path.To.Nuget.Config}" />
				</exec>

				<property name="Target.Name" value="" />
				<property name="Nuget.Fail.On.Error" value="true" />
				<property name="Nuget.Output.File" value="" />
			</finally>
		</trycatch>
	</target>

	<target name="SetupParameters.For.Nuget"
			description="Initializes parameters for NuGet tasks.">
		<property name="Deployment.Package.Version.Suffix" overwrite="false" value="${Last.Commit.Before.Current.Release}" />
	</target>

	<target name="Get.Nuget.Package.Existense"
			depends="SetupParameters.For.Nuget"
			description="Retrieves information about stored deployment deployment NuGet package versions in specified Nuget.Publishing.Source and saves it in a boolean property.">
		<property name="Path.To.Deployment.Package.All.Existing.Versions" value="${path::combine(Path.To.Automated.Procedures.Temp, 'DeploymentPackageAllExistingVersions.txt')}" />

		<property name="Nuget.Command.Line" value='list ${Deployment.Package.Id} -AllVersions -PreRelease -ConfigFile "${Path.To.Nuget.Config}"' />
		<property name="Nuget.Fail.On.Error" value="false" />
		<property name="Nuget.Output.File" value="${Path.To.Deployment.Package.All.Existing.Versions}" />
		<call target="Execute.Nuget.Command.Line.Using.Nuget.Source" />

		<property name="Full.Deployment.Package.Version" value="${Deployment.Package.Version}-${Deployment.Package.Version.Suffix}" />
		<loadfile file="${Path.To.Deployment.Package.All.Existing.Versions}" property="Deployment.Package.All.Existing.Versions" />

		<property name="Nuget.Package.Exists" value="${string::contains(Deployment.Package.All.Existing.Versions, Full.Deployment.Package.Version)}"/>
	</target>

	<target name="Prepare.Deployment.Package"
			depends="Get.Nuget.Package.Existense"
			description="Checks that deployment NuGet package exists and creates it otherwise.">
		<choose>
			<when test="${not Nuget.Package.Exists}">
				<call target="Build.Deployment.Tool" />
				<call target="CreateZipWithDeploymentPackageContent" />

				<property name="Nuspec.File.Name" value="package.nuspec" />
				<call target="Push.Nuget.Package" />
			</when>
			<otherwise>
				<echo message="Deployment package '${Deployment.Package.Id}.${Full.Deployment.Package.Version}' already exists at '${Nuget.Publishing.Source}'. Skip building" />
			</otherwise>
		</choose>

		<call target="Install.Nuget.Package" />
	</target>

	<target name="Check.Nuget.Package.Existense"
			depends="Get.Nuget.Package.Existense"
			description="Fails a build if deployment deployment NuGet package doesn't exist in the specified Nuget.Publishing.Source. Used by external CI tools (like Jenkins) to identify if it is required to build a package.">
		<fail if="${not Nuget.Package.Exists}"/>
	</target>

	<target name="Install.Nuget.Package"
			description="Installs deployment NuGet package from specified source."
			depends="SetupParameters.For.Nuget">
		<property name="Path.To.Nuget.Output.Directory" value="${path::combine(Path.To.Automated.Procedures.Output, 'Packages')}" />
		<exec program="cmd.exe" commandline='/C rmdir "${Path.To.Nuget.Output.Directory}" /S /Q' if='${directory::exists(Path.To.Nuget.Output.Directory)}'/>
		<exec program="cmd.exe" commandline='/C rmdir "${Path.To.Deployment.Package.Dir}" /S /Q' if='${directory::exists(Path.To.Deployment.Package.Dir)}'/>

		<trycatch>
			<try>
				<mkdir dir="${Path.To.Nuget.Output.Directory}" />
				<mkdir dir="${Path.To.Deployment.Package.Dir}" />
				<exec program="cmd.exe" commandline='/C subst s: "${Path.To.Nuget.Output.Directory}"' verbose='true' />
				<exec program="cmd.exe" commandline='/C subst t: "${Path.To.Deployment.Package.Dir}"' verbose='true' />

				<property name="Nuget.Command.Line" value='install ${Deployment.Package.Id} -Version ${Deployment.Package.Version}-${Deployment.Package.Version.Suffix} -OutputDirectory s: -ExcludeVersion -ConfigFile "${Path.To.Nuget.Config}"' />
				<call target="Execute.Nuget.Command.Line.Using.Nuget.Source" />

				<property name="Path.To.Installed.Nuget.Package" value="${path::combine('s:', Deployment.Package.Id)}" />

				<!-- To ensure that Path.To.Deployment.Package.Dir contains deployment package content. -->
				<move todir="t:">
					<fileset basedir="${Path.To.Installed.Nuget.Package}">
						<include name="**/*" />
					</fileset>
				</move>
				<exec program="cmd.exe" commandline='/C rmdir "${Path.To.Nuget.Output.Directory}" /S /Q' if='${directory::exists(Path.To.Nuget.Output.Directory)}'/>
			</try>
			<finally>
				<call target="Remove.Used.Substitutions" />
			</finally>
		</trycatch>
	</target>

	<target name="Push.Nuget.Package"
			depends="Create.Nuget.Package"
			description="Pushes deployment NuGet package to specified storage. During next build with the same package version the package will be obtained from the storage so its preparation will be skipped.">
		<property name="Nuget.Command.Line" value='push *.nupkg -ApiKey ${Nuget.Uploader.Username}:${Nuget.Uploader.Password} -ConfigFile "${Path.To.Nuget.Config}"' />
		<call target="Execute.Nuget.Command.Line.Using.Nuget.Source" />
	</target>

	<target name="Create.Nuget.Package"
			depends="SetupParameters.For.Nuget"
			description="Prepares deployment NuGet package with script, that runs deploy based on files and AMLs, which were modified since the latest release.">
		<trycatch>
			<try>
				<exec program="cmd.exe" commandline='/C subst s: "${Path.To.This.Git.Repository}"' verbose='true' />

				<property name="Path.To.Package.Nuspec" value="${path::combine(Path.To.This.Git.Repository, 'AutomatedProcedures\' + Nuspec.File.Name)}" />
				<property name="Path.To.Expanded.Package.Nuspec" value="${path::combine(Path.To.Deployment.Package.Dir, Nuspec.File.Name)}" />
				<loadfile file="${Path.To.Package.Nuspec}" property="Package.Nuspec.Content">
					<filterchain>
						<expandproperties />
					</filterchain>
				</loadfile>
				<echo message="${Package.Nuspec.Content}" file="${Path.To.Expanded.Package.Nuspec}" />

				<exec program="${Path.To.Nuget}" verbose="true" workingdir="s:">
					<arg value="pack" />
					<arg value="${Path.To.Expanded.Package.Nuspec}" />
					<arg value="-BasePath" />
					<arg value="s:" />
					<arg value="-Version" />
					<arg value="${Deployment.Package.Version}" />
					<arg value="-Suffix" />
					<arg value="${Deployment.Package.Version.Suffix}" />
				</exec>
			</try>
			<finally>
				<call target="Remove.Used.Substitutions" />
			</finally>
		</trycatch>
	</target>

	<target name="CreateZipWithDeploymentPackageContent"
			depends="GetGitDiffBetweenCurrentHeadStateAndLastRelease"
			description="Prepares zip archive with files and AMLs, which were modified since the latest release.">
		<trycatch>
			<try>
				<property name="Path.To.AutomatedProcedures" value="${path::combine(Path.To.This.Git.Repository, 'AutomatedProcedures')}" />
				<exec program="cmd.exe" commandline='/C subst s: "${Path.To.AutomatedProcedures}"' verbose='true' />
				<exec program="cmd.exe" commandline='/C subst t: "${Path.To.Deployment.Package.Dir}"' verbose='true' />

				<property name="Path.To.File.With.List.Of.Files.To.Deploy" value="${path::combine('t:', 'ListOfFilesToDeploy.txt')}" />
				<property name="Path.To.File.With.List.Of.Files.To.Delete" value="${path::combine('t:', 'ListOfFilesToDelete.txt')}" />

				<property name="Deployment.Package.Content.Archive.Name" value="Deployment-Package-Content.zip" />
				<property name="Deployment.Package.Content.Archive.Names" value="${Deployment.Package.Content.Archive.Name}" />

				<property name="Path.To.Deployment.Package.Content.Archive" value="${path::combine('t:', Deployment.Package.Content.Archive.Name)}" />
				<exec program="cmd" commandline='/C del /F "${Path.To.Deployment.Package.Content.Archive}"' if="${file::exists(Path.To.Deployment.Package.Content.Archive)}" />

				<if test="${Deploy.From.Package.Content.With.Full.CodeTree}">
					<property name="Deployment.Package.Content.Full.CodeTree.Archive.Name" value="Deployment-Package-Content-Full-CodeTree.zip" />
					<property name="Path.To.Deployment.Package.Content.Full.CodeTree.Archive" value="${path::combine('t:', Deployment.Package.Content.Full.CodeTree.Archive.Name)}" />
					<property name="Deployment.Package.Content.Archive.Names"
							  value="${Deployment.Package.Content.Archive.Names},${Deployment.Package.Content.Full.CodeTree.Archive.Name}" />

					<call target="Check.CodeTree.Zip"/>

					<copy file="${Path.To.CodeTree.Zip}" tofile="${Path.To.Deployment.Package.Content.Full.CodeTree.Archive}" />

					<property name="Path.To.File.With.List.Of.Paths.To.Delete" value="${path::combine('t:', 'ListOfPathsToDelete.txt')}" />

					<exec program="powershell" verbose="true" workingdir="${Path.To.This.Git.Repository}" output="${Path.To.File.With.List.Of.Paths.To.Delete}">
						<arg value="${path::combine(Path.To.This.Git.Repository, 'AutomatedProcedures\PowershellScripts\ShrinkListOfFilesToDelete.ps1')}"/>
						<arg value="-PathToInputFile"/>
						<arg value="${Path.To.File.With.List.Of.Files.To.Delete}"/>
						<arg value="-PathToOutputFile"/>
						<arg value="${Path.To.File.With.List.Of.Paths.To.Delete}"/>
					</exec>

					<exec program="${Path.To.SevenZip}" verbose="true" workingdir="t:">
						<arg value="d"/>
						<arg value="${Deployment.Package.Content.Full.CodeTree.Archive.Name}"/>
						<arg value="@${path::get-file-name(Path.To.File.With.List.Of.Paths.To.Delete)}"/>
					</exec>
				</if>

				<foreach item="String" property="Current.Deployment.Package.Content.Archive.Name" in="${Deployment.Package.Content.Archive.Names}" delim=",">
					<exec program="${Path.To.SevenZip}" verbose="true" workingdir="t:">
						<arg value="a"/>
						<arg value="${Current.Deployment.Package.Content.Archive.Name}"/>
						<arg value="*"/>
						<arg value="-r"/>
						<arg value="-x!*.nupkg"/>
						<arg value="-x!*.zip"/>
					</exec>
				</foreach>
			</try>
			<finally>
				<call target="Remove.Used.Substitutions" />
			</finally>
		</trycatch>
	</target>

	<target name="CreateZipWithDeploymentPackageAndScripts"
					depends="Prepare.Deployment.Package"
					description="Prepares zip archive with script, that runs deploy based on files and AMLs, which were modified since the latest release.">
		<property name="Deployment.Package.Archive.Name" overwrite="false" value="Deployment-Package-From-${Last.Commit.Before.Current.Release}-${This.Script.Start.Time.As.Sortable.Date}.zip" />
		<property name="Path.To.Deployment.Package.Archive" value="${path::combine(Path.To.This.Git.Repository, Deployment.Package.Archive.Name)}" />
		<exec program="cmd" commandline='/C del /F "${Path.To.Deployment.Package.Archive}"' if="${file::exists(Path.To.Deployment.Package.Archive)}" />
		<exec program="${Path.To.SevenZip}" verbose="true" workingdir="${Path.To.This.Git.Repository}">
			<arg value="a"/>
			<arg value="${Path.To.Deployment.Package.Archive}"/>
			<arg value="${Path.To.Deployment.Package.Dir}\**"/>
			<arg value="-x!*.nupkg"/>
		</exec>
	</target>

	<target name="Unzip.Deployment.Package.Content"
			description="Performs unzip on a part of a package containing modified code tree and AMLs.">
		<property name="Deployment.Package.Content.Archive.Name" overwrite="false" value="Deployment-Package-Content.zip" />
		<property name="Deployment.Package.Content.Full.CodeTree.Archive.Name" overwrite="false" value="Deployment-Package-Content-Full-CodeTree.zip" />
		<property name="Path.To.Deployment.Package.Content.Archive.Name" value="${path::combine(Path.To.Deployment.Package.Dir, Deployment.Package.Content.Archive.Name)}" />
		<property name="Path.To.Deployment.Package.Content.Full.CodeTree.Archive"
				  value="${path::combine(Path.To.Deployment.Package.Dir, Deployment.Package.Content.Full.CodeTree.Archive.Name)}" />
		<choose>
			<when test="${Deploy.From.Package.Content.With.Full.CodeTree and file::exists(Path.To.Deployment.Package.Content.Full.CodeTree.Archive)}">
				<exec program="${Path.To.SevenZip}" verbose="true" workingdir="${Path.To.Deployment.Package.Dir}">
					<arg value="x"/>
					<arg value="-aoa"/>
					<arg value="${Deployment.Package.Content.Full.CodeTree.Archive.Name}"/>
				</exec>
			</when>
			<when test="${file::exists(Path.To.Deployment.Package.Content.Archive.Name)}">
				<exec program="${Path.To.SevenZip}" verbose="true" workingdir="${Path.To.Deployment.Package.Dir}">
					<arg value="x"/>
					<arg value="-aoa"/>
					<arg value="${Deployment.Package.Content.Archive.Name}"/>
				</exec>
			</when>
			<otherwise>
				<echo message="Deployment package ${Path.To.Deployment.Package.Content.Archive.Name} wasn't found" />
			</otherwise>
		</choose>
	</target>

	<target name="GetGitDiffBetweenCurrentHeadStateAndLastRelease" 
			depends="Build.Custom.Solutions"
			description="Prepare files to be put to a delta package. The target searches for files that were modified since the latest release and put them to a special location.">
		<!--
			Configure git with '.gitconfig' from the repositotry
		-->
		<echo>Configure 'git' with '.gitconfig' from the repositotry</echo>
		<exec program="git"
			commandline="config --local include.path ../.gitconfig"
			workingdir="${Path.To.This.Git.Repository}" />
		<!--
			Check that specified in the default settings commit hash of current release does exist in the repositotry
		-->
		<echo>Check if commit ${Last.Commit.Before.Current.Release} exists in a repository. Path to the repository: ${Path.To.This.Git.Repository}</echo>
		<exec program="git"
					commandline="rev-parse --verify ${Last.Commit.Before.Current.Release}"
					workingdir="${Path.To.This.Git.Repository}"
					output="${Path.To.Pre.Deploy.Validations.Log.File}"
					failonerror="false"
					resultproperty="Commit.Found" />

		<fail if="${Commit.Found != '0'}"
			message="${Last.Commit.Before.Current.Release} not found in the repository" />
		<echo>OK</echo>
		<trycatch>
			<try>
				<exec program="cmd.exe" commandline='/C rmdir "${Path.To.Deployment.Package.Dir}" /S /Q' if='${directory::exists(Path.To.Deployment.Package.Dir)}'/>
				<mkdir dir="${Path.To.Deployment.Package.Dir}" />
				<exec program="cmd.exe" commandline='/C subst s: "${Path.To.Deployment.Package.Dir}"' verbose='true' />
				<exec program="cmd.exe" commandline='/C subst t: "${Path.To.This.Git.Repository}"' verbose='true' />

				<echo>Get list of files, which were added, modified or removed since ${Last.Commit.Before.Current.Release}</echo>
				<property name="Path.To.File.With.List.Of.Files.To.Deploy" value="${path::combine('s:', 'ListOfFilesToDeploy.txt')}" />
				<property name="Path.To.File.With.List.Of.Files.To.Delete" value="${path::combine('s:', 'ListOfFilesToDelete.txt')}" />
				<property name="Path.To.File.With.Templates.Of.Setting.Files.Modifications" value="${path::combine('s:', 'TemplatesOfSettingFilesModifications.txt')}" />
				<property name="Path.To.DeltaExtractionTool" value="${path::combine('t:', 'AutomatedProcedures\tools\Aras.DeltaExtraction.CommandLine\lib\DeltaExtractionCmd.exe')}" />
				<property name="Path.To.DeltaExtraction.ItemTypes.SkipFile" value="${path::combine('t:', 'AutomatedProcedures\Delta.Extraction.ItemTypes.exclude')}" />
				<property name="Path.To.AML.Packages" value="${path::combine(Path.To.This.Git.Repository, 'AML-packages')}" />
				<property name="Git.AML.Packages.Path" value="AML-packages/" />
				<property name="Git.AML.Packages.Path" value="" if="${Use.Delta.Extraction.Tool}" />
				<!--
					Parameters that we pass to git diff:
					staged
						Show only that changes, that was staged to this repository (via 'git add/commit')
					name-only
						Show only names of changed files.
					no-renames
						Turn off rename detection
					diff-filter=ACM
						Select only files that are Added (A), Copied (C), Modified (M)
					diff-filter=D
						Select only files that are Removed (D)
				-->
				<if test="${Project.Prefix != 'CRT'}">
					<exec
						program="git"
						commandline='diff --staged --name-only --no-renames --diff-filter=ACM ${Last.Commit.Before.Current.Release} -- "AutomatedProcedures\TemplatesOfSettingFiles"/ "OAuthServer\OAuthServer.Plugins.json" ":!*.cer" ":!*.pfx"'
						workingdir="t:"
						output="${Path.To.File.With.Templates.Of.Setting.Files.Modifications}" />
					<if test="${file::exists(Path.To.File.With.Templates.Of.Setting.Files.Modifications)}" >
						<loadfile file="${Path.To.File.With.Templates.Of.Setting.Files.Modifications}" property="Templates.Of.Setting.Files.Modifications" />
						<fail message="Please use the transformation mechanism to update the config files. Refer to TransformationsOfConfigFiles folder in the root of the repository" if="${string::get-length('Templates.Of.Setting.Files.Modifications') > 0}" />
					</if>
				</if>
				<exec
					program="git"
					commandline='diff --staged --name-only --no-renames --diff-filter=ACM ${Last.Commit.Before.Current.Release} -- ${Git.AML.Packages.Path} ConversionServer/ OAuthServer/ DB/ Innovator/ VaultServer/ SelfServiceReporting/ AgentService/ AmlDeploymentScripts/ NAntDeploymentScripts/ TransformationsOfConfigFiles/ "Language packs"'
					workingdir="t:"
					output="${Path.To.File.With.List.Of.Files.To.Deploy}" />
				<exec
					program="git"
					commandline="diff --staged --name-only --no-renames --diff-filter=D ${Last.Commit.Before.Current.Release} -- ConversionServer/ OAuthServer/ DB/ Innovator/ VaultServer/ SelfServiceReporting/ AgentService/"
					workingdir="t:"
					output="${Path.To.File.With.List.Of.Files.To.Delete}" />

				<property name="Path.To.Package.Include.File" value="${path::combine('t:', 'AutomatedProcedures\package.include')}" />
				<property name="Path.To.Package.Exclude.File" value="${path::combine('t:', 'AutomatedProcedures\package.exclude')}" />
				<!--
					Used to receive delta between {Last.Commit.Before.Current.Release} and 'HEAD' commit in Git.
					This delta is being built for packages that are located in 'AML-packages' folder
				-->
				<exec 
					program="${Path.To.DeltaExtractionTool}"
					commandline='Repository -p ${Path.To.AML.Packages} -f ${Last.Commit.Before.Current.Release} -o s: -e "${Path.To.DeltaExtraction.ItemTypes.SkipFile}" -i "${Path.To.Package.Exclude.File}"'
					workingdir="t:"
					if="${Use.Delta.Extraction.Tool}"
					failonerror="true" />


				<!-- if file doesn't exist and code is still executing it means that there are no files to deploy -->
				<choose>
					<when test="${file::exists(Path.To.File.With.List.Of.Files.To.Deploy)}">
						<decode_git_diff_file_to_utf8 inputFile="${Path.To.File.With.List.Of.Files.To.Deploy}"
													outputFile="${Path.To.File.With.List.Of.Files.To.Deploy}" />
						<copy todir="s:">
							<fileset basedir="t:">
								<includesfile name="${Path.To.File.With.List.Of.Files.To.Deploy}" />
								<includesfile name="${Path.To.Package.Include.File}" />
								<excludesfile name="${Path.To.Package.Exclude.File}" />
							</fileset>
						</copy>
					</when>
					<otherwise>
						<copy todir="s:">
							<fileset basedir="t:">
								<includesfile name="${Path.To.Package.Include.File}" />
								<excludesfile name="${Path.To.Package.Exclude.File}" />
							</fileset>
						</copy>
					</otherwise>
				</choose>

				<mkdir dir="${path::combine('s:', 'Files')}" />
				<echo file="${path::combine('s:', 'Files\readme.txt')}">
					Since Aras Update package should contain at least one of the folders:
						- Files;
						- Imports;
						- Scripts.
				</echo>

				<if test="${directory::exists(path::combine(Path.To.Deployment.Package.Dir, 'AML-packages'))}">
					<!-- If there is AML-packages folder then there must be imports.mf inside it. -->
					<property name="Path.To.Manifest.File" value="${path::combine(Path.To.Deployment.Package.Dir, 'AML-packages\imports.mf')}" />
					<if test="${not file::exists(Path.To.Manifest.File)}">
						<copy file="${path::combine('t:', 'AML-packages\imports.mf')}" tofile="${Path.To.Manifest.File}" />
					</if>
					<fail if="${not aras::remove-missing-aml-packages-from-manifest-file(Path.To.Manifest.File)}" />
				</if>

				<property name="Path.To.Language.Packs" overwrite="false" value="${path::combine(Path.To.Deployment.Package.Dir, 'Language packs')}" />
				<if test="${directory::exists(Path.To.Language.Packs)}">
					<foreach item="Folder" in="${Path.To.Language.Packs}" property="Path.To.Language.CodeFolder">
					<property name="Language.CodeFolder" value="${path::get-file-name(Path.To.Language.CodeFolder)}" />
						<foreach item="File" property="Path.To.Repository.Language.Packs.Imports.Config">
							<in>
								<items basedir="${path::combine('t:', 'Language Packs')}">
									<include name="**\${Language.CodeFolder}\**\ImportConfig.xml" />
								</items>
							</in>
							<do>
								<property name="Path.To.Language.Packs.Imports.Config" value="${string::replace(Path.To.Repository.Language.Packs.Imports.Config, 'T:', 'S:')}" />
								<!-- If there is Language packs folder then there must be ImportConfig.xml inside it. -->
								<if test="${not file::exists(Path.To.Language.Packs.Imports.Config)}">
									<copy file="${Path.To.Repository.Language.Packs.Imports.Config}" tofile="${Path.To.Language.Packs.Imports.Config}" />
								</if>
							</do>
						</foreach>
					</foreach>
				</if>

				<!--Copy Sample Data to 'TemporaryFolderWithFilesToDeploy' if Sample Data deployment is turned on (even if there are no changes in files)-->
				<echo message="Copy Sample Data if required" />
				<choose>
					<when test="${Perform.Import.Of.SampleData == 'true'}">
						<echo message="Copying Sample Data" />
						<copy todir="s:">
							<fileset basedir="t:">
								<include name="Sample Data/**" />
							</fileset>
						</copy>
						<echo message="Sample Data copied" />
					</when>
					<otherwise>
						<echo message="Sample Data copying was skipped" />
					</otherwise>
				</choose>
			</try>
			<finally>
				<call target="Remove.Used.Substitutions" />
			</finally>
		</trycatch>
	</target>
</project>