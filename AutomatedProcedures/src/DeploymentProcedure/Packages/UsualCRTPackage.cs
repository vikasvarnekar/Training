using System;
using System.IO;
using System.Globalization;
using System.Xml.Serialization;
using System.Collections.ObjectModel;
using DeploymentProcedure.Components;
using DeploymentProcedure.Components.Base;
using DeploymentProcedure.Components.Type;
using DeploymentProcedure.Components.Utility;
using DeploymentProcedure.Logging;
using DeploymentProcedure.Packages.Base;
using DeploymentProcedure.Utility;
using DeploymentProcedure.Utility.FileSystem.Base;

namespace DeploymentProcedure.Packages
{
	public class UsualCRTPackage : Package
	{
		[XmlArray("featureLicenses")]
		[XmlArrayItem("featureLicense")]
		public Collection<SecretString> FeatureLicenses { get; set; }
		[XmlArray("variables")]
		[XmlArrayItem("variable", typeof(Variable))]
		public Collection<Variable> Variables { get; set; }

		public override void ApplyToAgentComponent(AgentComponent agentComponent)
		{
			ApplyToWindowsServiceComponent(agentComponent);
		}

		public override void ApplyToConversionComponent(ConversionComponent conversionComponent)
		{
			ApplyToWebComponent(conversionComponent);
		}

		public override void ApplyToDatabaseComponent(DatabaseComponent databaseComponent)
		{
			Logger.Instance.Log(LogLevel.Info, "\nDeploying component ({0}):\n", databaseComponent.Id);

			if (FeatureLicenses != null && FeatureLicenses.Count > 0)
			{
				Logger.Instance.Log(LogLevel.Info, "\t Applying feature licenses to {0}...", databaseComponent.Id);

				FeatureLicenseManager featureLicenseManager = new FeatureLicenseManager(
					databaseComponent.InnovatorUrl,
					databaseComponent.DatabaseName,
					databaseComponent.LoginOfRootInnovatorUser,
					databaseComponent.PasswordOfRootInnovatorUser.Value);
				foreach (SecretString featureLicense in FeatureLicenses)
				{
					featureLicenseManager.ImportFeatureLicense(featureLicense.Value);
				}
			}

			string pathToPreAmlDeploymentScripts = Path.Combine(PathToDeploymentPackage, databaseComponent.PreAmlDeploymentScriptsDirectoryName);
			if (Directory.Exists(pathToPreAmlDeploymentScripts))
			{
				Logger.Instance.Log(LogLevel.Info, "\nApplying pre-deployment AML script to ({0}):\n", databaseComponent.Id);

				databaseComponent.ApplyAmlsFromFolderRecursively(pathToPreAmlDeploymentScripts);
			}

			RunConsoleUpgrade(Path.Combine(PathToDeploymentPackage, databaseComponent.AmlPackagesDirectoryName), databaseComponent);
			RunLanguageTool(Path.Combine(PathToDeploymentPackage, databaseComponent.LanguagePacksDirectoryName), databaseComponent);

			string pathToPostAmlDeploymentScripts = Path.Combine(PathToDeploymentPackage, databaseComponent.PostAmlDeploymentScriptsDirectoryName);
			if (Directory.Exists(pathToPostAmlDeploymentScripts))
			{
				Logger.Instance.Log(LogLevel.Info, "\nApplying post-deployment AML script to ({0}):\n", databaseComponent.Id);

				databaseComponent.ApplyAmlsFromFolderRecursively(pathToPostAmlDeploymentScripts);
			}

			foreach (Variable variable in Variables)
			{
				databaseComponent.ApplyAml(variable.Aml);
			}
		}

		public override void ApplyToInnovatorComponent(InnovatorComponent innovatorComponent)
		{
			ApplyToWebComponent(innovatorComponent);

			string deploymentPackageSourcePath = Path.Combine(PathToDeploymentPackage, innovatorComponent.DeploymentPackageDirectoryName);
			if (Directory.Exists(Path.Combine(deploymentPackageSourcePath, "Client")))
			{
				IncreamentClientWebConfigFilesRevision(innovatorComponent);
			}

			innovatorComponent.SetupNtfsPermissions();
		}

		public override void ApplyToOAuthComponent(OAuthComponent oauthComponent)
		{
			ApplyToWebComponent(oauthComponent);
		}

		public override void ApplyToSchedulerComponent(SchedulerComponent schedulerComponent)
		{
			ApplyToWindowsServiceComponent(schedulerComponent);
		}

		public override void ApplyToSelfServiceReportingComponent(SelfServiceReportingComponent selfServiceReportingComponent)
		{
			ApplyToWebComponent(selfServiceReportingComponent);
		}

		public override void ApplyToVaultComponent(VaultComponent vaultComponent)
		{
			ApplyToWebComponent(vaultComponent);
		}

		public override void ApplyToWebComponent(WebComponent webComponent)
		{
			Logger.Instance.Log(LogLevel.Info, "\nDeploying component ({0}):\n", webComponent.Id);

			string pathToAppOfflineHtm = BaseFileSystem.CombinePaths(webComponent.InstallationPath, "app_offline.htm");
			if (string.IsNullOrEmpty(webComponent.ManagedRuntimeVersion))
			{
				using (FileStream appOfflineHtm = webComponent.TargetFileSystem.OpenFile(pathToAppOfflineHtm))
				{
					StreamWriter appOfflineHtmWriter = new StreamWriter(appOfflineHtm);
					appOfflineHtmWriter.WriteLine("This is temporary app_offline.htm generated by a deployment script to stop web application.");
					appOfflineHtmWriter.WriteLine("If you see this - please remove the file");
				}
			}

			ApplyToCodeTreeComponent(webComponent);

			if (string.IsNullOrEmpty(webComponent.ManagedRuntimeVersion) && webComponent.TargetFileSystem.FileExists(pathToAppOfflineHtm))
			{
				webComponent.TargetFileSystem.DeleteFile(pathToAppOfflineHtm);
			}
		}

		public override void ApplyToWindowsServiceComponent(WindowsServiceComponent windowsServiceComponent)
		{
			Logger.Instance.Log(LogLevel.Info, "\nDeploying component ({0}):\n", windowsServiceComponent.Id);

			string deploymentPackageSourcePath = Path.Combine(PathToDeploymentPackage, windowsServiceComponent.DeploymentPackageDirectoryName);
			if (Directory.Exists(deploymentPackageSourcePath))
			{
				windowsServiceComponent.StopWindowsService();
			}

			ApplyToCodeTreeComponent(windowsServiceComponent);

			if (Directory.Exists(deploymentPackageSourcePath))
			{
				windowsServiceComponent.StartWindowsService();
			}
		}

		private void ApplyToCodeTreeComponent(CodeTreeComponent codeTreeComponent)
		{
			string deploymentPackageSourcePath = BaseFileSystem.CombinePaths(PathToDeploymentPackage, codeTreeComponent.DeploymentPackageDirectoryName);
			if (codeTreeComponent.LocalFileSystem.DirectoryExists(deploymentPackageSourcePath))
			{
				codeTreeComponent.LocalFileSystem.CopyDirectory(deploymentPackageSourcePath, codeTreeComponent.TargetFileSystem, codeTreeComponent.InstallationPath);
			}
			else
			{
				Logger.Instance.Log(LogLevel.Info, "\tNothing found to deploy to component ({0}):\n", codeTreeComponent.Id);
			}
		}

		private void RunConsoleUpgrade(string pathToAmlPackages, DatabaseComponent databaseComponent)
		{
			if (Directory.Exists(pathToAmlPackages))
			{
				Logger.Instance.Log(LogLevel.Info, "\nApplying AML packages to ({0}):\n", databaseComponent.Id);

				int consoleUpgradeResultCode = ProcessWrapper.Execute(LogLevel.None, Properties.PathToConsoleUpgrade,
					"database=\"{0}\" server=\"{1}\" login=\"root\" password=\"{2}\" release=\"{3}\" mfFile=\"{4}\" import verbose merge dir=\"{5}\" log=\"{6}\" timeout=\"1000000\"",
					databaseComponent.DatabaseName,
					databaseComponent.InnovatorUrl,
					databaseComponent.PasswordOfRootInnovatorUser.Value,
					Properties.InnovatorVersion, Path.Combine(pathToAmlPackages, databaseComponent.AmlPackagesManifest),
					pathToAmlPackages,
					databaseComponent.PathToConsoleUpgradeLogFile);
				if (consoleUpgradeResultCode != 0)
				{
					throw new Exception(string.Format(CultureInfo.InvariantCulture, "Failed to apply AML packages from {0}, consoleUpgrade.exe returned exit code {1}.", pathToAmlPackages, consoleUpgradeResultCode));
				}
			}
		}

		private void RunLanguageTool(string pathtoLanguagePacks, DatabaseComponent databaseComponent)
		{
			if (Directory.Exists(pathtoLanguagePacks))
			{
				Logger.Instance.Log(LogLevel.Info, "\nApplying language packs to ({0}):\n", databaseComponent.Id);

				foreach (string languageCodeFolder in Directory.GetDirectories(pathtoLanguagePacks))
				{
					string languageCode = languageCodeFolder.Substring(languageCodeFolder.LastIndexOf('\\') + 1);

					foreach (string pathToLanguageToolConfig in Directory.GetFiles(languageCodeFolder, "ImportConfig.xml", SearchOption.AllDirectories))
					{
						string pathToLanguagePacksXmlDir = Path.Combine(Path.GetDirectoryName(pathToLanguageToolConfig), "xml");

						int languageToolResultCode = ProcessWrapper.Execute(LogLevel.None, Properties.PathToLanguageTool,
							"-import -config_file:\"{0}\" -folder:\"{1}\" -language_code:\"{2}\" -server:\"{3}\" -db:\"{4}\" -login:\"{5}\" -pwd:\"{6}\"",
							pathToLanguageToolConfig,
							pathToLanguagePacksXmlDir,
							languageCode,
							databaseComponent.SqlServer,
							databaseComponent.DatabaseName,
							databaseComponent.InnovatorLogin,
							databaseComponent.InnovatorPassword.Value);
						if (languageToolResultCode != 0)
						{
							throw new Exception(string.Format(CultureInfo.InvariantCulture, "Failed to apply Language packs from {0}, LangugeTool.exe returned exit code {1}.", pathtoLanguagePacks, languageToolResultCode));
						}
					}
				}
			}
		}

		private void IncreamentClientWebConfigFilesRevision(InnovatorComponent innovatorComponent)
		{
			string pathToClientWebConfig = Path.Combine(innovatorComponent.InstallationPath, "Client\\web.config");
			string filesRevisionXpath = "/configuration/cachingModule/@filesRevision";

			string currentRevision = innovatorComponent.TargetFileSystem.XmlHelper.XmlPeek(pathToClientWebConfig, filesRevisionXpath);
			int nextRevision;
			if (int.TryParse(currentRevision, NumberStyles.Integer, CultureInfo.InvariantCulture, out nextRevision))
			{
				nextRevision++;
			}
			else
			{
				nextRevision = 2;
			}

			Logger.Instance.Log(LogLevel.Info, "Updating files revision from '{0}' to '{1}' for client web.config", currentRevision, nextRevision);

			innovatorComponent.TargetFileSystem.XmlHelper.XmlPoke(pathToClientWebConfig, filesRevisionXpath, nextRevision.ToString(CultureInfo.InvariantCulture));
		}
	}
}
