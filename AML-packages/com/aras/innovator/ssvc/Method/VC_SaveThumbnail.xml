<AML>
 <Item type="Method" id="064748F8526E4DDB81586B774811227A" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[/*
  This method gets png base64 encoded data and saves it to the vault as png file;
*/     
//Max width and height of result png image (in px)
int maxWidth = 75, maxHeight = 75;

Innovator myInnovator = this.getInnovator();
string fileId = this.getProperty("file_id");;
fileId = EnsureAndNormalizeGuidFormat(fileId);

string encodedString = this.getProperty("png_data");

if (String.IsNullOrEmpty(encodedString))
{
    return myInnovator.newError(CCO.ErrorLookup.Lookup("SSVC_NoDataFound"));
}

encodedString = encodedString.Substring(encodedString.IndexOf(',') + 1);

byte[] decodedBytes = Convert.FromBase64String(encodedString);

string temp_folder = CCO.ServerEnvironment.GetTempFolderPath();
string thumbnailPath = Path.Combine(temp_folder, fileId + "_tmp_" + Path.GetRandomFileName());
thumbnailPath = Path.ChangeExtension(thumbnailPath, ".png");
string snapshotPath = Path.Combine(temp_folder, fileId + "_tmp_" + Path.GetRandomFileName());
snapshotPath = Path.ChangeExtension(snapshotPath, ".png");

try
{
    using (MemoryStream stream = new MemoryStream(decodedBytes))
    {
        //Get "System.Drawing" assembly
        System.Reflection.Assembly asm = System.Reflection.Assembly.Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

        //Get "Bitmap" type
        var bitmapType = asm.GetType("System.Drawing.Bitmap");

        //Get "Image" type
        var imageType = asm.GetType("System.Drawing.Image");

        //Get "Graphics" type
        var graphicsType = asm.GetType("System.Drawing.Graphics");

        //Get "SmoothingMode" type
        var smoothingModeType = asm.GetType("System.Drawing.Drawing2D.SmoothingMode");

        //Get "InterpolationMode" type
        var interpolationModeType = asm.GetType("System.Drawing.Drawing2D.InterpolationMode");

        //Get "PixelOffsetMode" type
        var pixelOffsetModeType = asm.GetType("System.Drawing.Drawing2D.PixelOffsetMode");
                
        //Get "Rectangle" type
        var rectangleType = asm.GetType("System.Drawing.Rectangle");

        //Get "GraphicsUnit" type
        var graphicsUnitType = asm.GetType("System.Drawing.GraphicsUnit");

        //-----------------------------------------------------------------------		
        //Create original bitmap instance
        var originalBitmapInstance = Activator.CreateInstance(bitmapType, new Object[] { stream });

        //Get bitmap save method
        System.Reflection.MethodInfo bitmapSaveMethod = bitmapType.GetMethod("Save", new Type[] { typeof(String) });

        //Save original bitmap image
        Object resultOriginalBitmapSaveMethod = bitmapSaveMethod.Invoke(originalBitmapInstance, new Object[] { snapshotPath });

        //Get width and height
        System.Reflection.PropertyInfo pi = bitmapType.GetProperty("Width");
        int width = (int)pi.GetValue(originalBitmapInstance, null);
        pi = bitmapType.GetProperty("Height");
        int height = (int)pi.GetValue(originalBitmapInstance, null);

        int minWH = width < height ? width : height;
                
        //-----------------------------------------------------------------------
        //Create new bitmap instance
        var newBitmapInstance = Activator.CreateInstance(bitmapType, new Object[] { maxWidth, maxHeight });

        //Create new graphics instance
        System.Reflection.MethodInfo graphicsFromImageMethod = graphicsType.GetMethod("FromImage", new Type[] { bitmapType });
        Object resultGraphicsFromImageMethod = graphicsFromImageMethod.Invoke(graphicsType, new Object[] { newBitmapInstance });

        //Set smoothing mode
        pi = graphicsType.GetProperty("SmoothingMode");
        pi.SetValue(resultGraphicsFromImageMethod, smoothingModeType.GetField("HighQuality").GetValue(null), null);

        //Set interpolation mode
        pi = graphicsType.GetProperty("InterpolationMode");
        pi.SetValue(resultGraphicsFromImageMethod, interpolationModeType.GetField("HighQualityBicubic").GetValue(null), null);

        //Set pixeloffset mode
        pi = graphicsType.GetProperty("PixelOffsetMode");
        pi.SetValue(resultGraphicsFromImageMethod, pixelOffsetModeType.GetField("HighQuality").GetValue(null), null);

        //Create new rectangle instance
        var sourceRectInstance = Activator.CreateInstance(rectangleType, new Object[] { (width - minWH) / 2, (height - minWH) / 2, minWH, minWH });
        var destRectInstance = Activator.CreateInstance(rectangleType, new Object[] { 0, 0, maxWidth, maxHeight });

        //Call DrawImage
        System.Reflection.MethodInfo graphicsDrawImageMethod = graphicsType.GetMethod("DrawImage", new Type[] { imageType, rectangleType, rectangleType, graphicsUnitType });
        Object resultGraphicsDrawImageMethod = graphicsDrawImageMethod.Invoke(resultGraphicsFromImageMethod, new Object[] { originalBitmapInstance, destRectInstance, sourceRectInstance, graphicsUnitType.GetEnumValues().GetValue(2) });

        //Save Bitmap image with calculated size
        Object resultNewBitmapSaveMethod = bitmapSaveMethod.Invoke(newBitmapInstance, new Object[] { thumbnailPath });

        //Dispose graphics object
        System.Reflection.MethodInfo graphicsDisposeMethod = graphicsType.GetMethod("Dispose", new Type[] { });
        Object resultGraphicsDisposeMethod = graphicsDisposeMethod.Invoke(resultGraphicsFromImageMethod, new Object[] { });
    }
}
catch (Exception e)
{
    File.Delete(thumbnailPath);
    File.Delete(snapshotPath);

    return myInnovator.newError(e.Message);
}

try
{
	//Save snapshot to the vault
	Item snapshotItm = this.newItem("File", "add");
	snapshotItm.setProperty("filename", fileId + "_snapshot.png");
	snapshotItm.attachPhysicalFile(snapshotPath);
	snapshotItm = snapshotItm.apply();

	if (snapshotItm.isError())
	{
		return myInnovator.newError(snapshotItm.getErrorString());
	}

	//Save thumbnail to the vault
	Item thumbnailItm = this.newItem("File", "add");
	thumbnailItm.setProperty("filename", fileId + "_thumbnail.png");
	thumbnailItm.attachPhysicalFile(thumbnailPath);
	thumbnailItm = thumbnailItm.apply();

	if (thumbnailItm.isError())
	{
		return myInnovator.newError(thumbnailItm.getErrorString());
	}

	return myInnovator.newResult(snapshotItm.getID() + ',' + thumbnailItm.getID());
}
finally
{
	File.Delete(thumbnailPath);
	File.Delete(snapshotPath);
}
}

		/// <summary>
		/// Parses user input as GUID and converts it to upper case string.
		/// Typically <paramref name="userInputId"/> should match with the returned value.
		/// Parse exception is thrown otherwise.
		/// </summary>
		/// <param name="userInputId">value to parse</param>
		/// <returns></returns>
		internal static string EnsureAndNormalizeGuidFormat(string userInputId)
		{
			if (userInputId == null)
			{
				//explicitly return null to distinguish it from the user input
				return null;
			}
			//actually, we need to check for empty string, but coding rules fail for 'userInputId == string.Empty'
			if (string.IsNullOrEmpty(userInputId))
			{
				//explicitly return null to distinguish it from the user input
				return string.Empty;
			}
			return Guid.ParseExact(userInputId, "N").ToString("N").ToUpperInvariant();]]></method_code>
  <method_type>C#</method_type>
  <name>VC_SaveThumbnail</name>
 </Item>
</AML>