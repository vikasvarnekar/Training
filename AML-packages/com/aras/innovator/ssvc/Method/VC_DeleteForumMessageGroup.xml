<AML>
 <Item type="Method" id="90C3EF8F4025456FB2B000A0344F012B" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[string sourceId = this.getProperty("source_id");
if (String.IsNullOrEmpty(sourceId))
{
	throw new Exception(CCO.ErrorLookup.Lookup("SSVC_DeleteFMGSourceIdNotSet"));
}
string type = this.getProperty("group_type");
if (String.IsNullOrEmpty(type))
{
	throw new Exception(CCO.ErrorLookup.Lookup("SSVC_DeleteFMGGroupTypeNotSet"));
}
string criteriaId = getProperty("user_criteria_id");
if (String.IsNullOrEmpty(criteriaId))
{
	throw new Exception(CCO.ErrorLookup.Lookup("SSVC_DeleteFMGUserCriteriaIdNotSet"));
}

Item fmg = this.newItem("ForumMessageGroup", "delete");
fmg.setAttribute("where", GetWhereCriteria(sourceId, type, criteriaId, CCO.DB.InnDatabase.QuoteValue));
Item result = fmg.apply();
if (result.isError())
{
	throw new Exception(String.Format(CultureInfo.InvariantCulture, CCO.ErrorLookup.Lookup("SSVC_DeleteFMG"), result.getErrorString()));
}
return result;
}

private static string GetWhereCriteria(string sourceId, string type, string criteriaId, Func<string, string> quoteValueFunc)
{
	const string tableName = "FORUMMESSAGEGROUP";
	return String.Format(CultureInfo.InvariantCulture, "[{3}].source_id='{0}' and [{3}].group_type='{1}' and [{3}].user_criteria_id='{2}'",
		quoteValueFunc(sourceId), quoteValueFunc(type), quoteValueFunc(criteriaId), tableName);
]]></method_code>
  <method_type>C#</method_type>
  <name>VC_DeleteForumMessageGroup</name>
 </Item>
</AML>