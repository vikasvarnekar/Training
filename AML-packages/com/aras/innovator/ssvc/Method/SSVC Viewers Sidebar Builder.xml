<AML>
 <Item type="Method" id="C504DD2720184B069616A0996E998294" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[	var dataAccessLayer = new DataAccessLayer(this.getInnovator());
	var businessLogic = new BusinessLogic(dataAccessLayer);
	string itemTypeId = this.getProperty("item_type_id");
	Item cuiItemsCollection = this.getItemsByXPath("//Data/Item");
	return businessLogic.GetCUIItems(itemTypeId, cuiItemsCollection);
}

		internal class BusinessLogic
		{
			private readonly IDataAccessLayer _dataAccessLayer;

			public BusinessLogic(IDataAccessLayer dataAccessLayer)
			{
				_dataAccessLayer = dataAccessLayer;
			}

			public Item GetCUIItems(string itemTypeId, Item cuiItemsCollection)
			{
				const string ssvcViewersSectionId = "07679ADCCA894B198BA9B22EBA0C6727";
				bool ssvcIsEnabled = this._dataAccessLayer.ChecIskSSVCEnabledForItemType(itemTypeId);
				
				if (ssvcIsEnabled)
				{
					return null;
				}

				Item result = _dataAccessLayer.newItem();

				for (int i = 0; i < cuiItemsCollection.getItemCount(); i++)
				{
					Item cuiItem = cuiItemsCollection.getItemByIndex(i);
					if (cuiItem.getProperty("section") == ssvcViewersSectionId)
					{
						Item cuiItemWithRemoveAction = _dataAccessLayer.newItem();
						cuiItemWithRemoveAction.setType("CommandBarSectionItem");
						cuiItemWithRemoveAction.setRelatedItem(cuiItem);
						cuiItemWithRemoveAction.setProperty("action", "Remove");

						result.appendItem(cuiItemWithRemoveAction);
					}
				}

				if (result.getItemCount() > 1)
				{
					result.removeItem(result.getItemByIndex(0));
					return result;
				}
				else
				{
					return null;
				}
			}
		}

		internal interface IDataAccessLayer
		{
			bool ChecIskSSVCEnabledForItemType(string itemTypeId);
			Item newItem();
		}

		internal class DataAccessLayer : IDataAccessLayer
		{
			private readonly Innovator _innovator;

			internal DataAccessLayer(Innovator innovator)
			{
				this._innovator = innovator;
			}

			public bool ChecIskSSVCEnabledForItemType(string itemTypeId)
			{
				Item itemType = this._innovator.newItem("ItemType", "get");
				itemType.setID(itemTypeId);
				itemType.setAttribute("select", "name");
				itemType = itemType.apply();

				string itemTypeName = itemType.getProperty("name");

				Item checkSSVCMethod = this._innovator.newItem(itemTypeName, "VC_IsSSVCEnabledForItem");
				// item id is required by method
				checkSSVCMethod.setID("00000000000000000000000000000000");

				Item checkSSVCMethodResult;
				try
				{
					checkSSVCMethodResult = checkSSVCMethod.apply();
				}
				catch (Aras.Server.Core.InnovatorServerException)
				{
					// core will throw InnovatorServerException
					// in case of invalid SSVC feature license
					return false;
				}

				return checkSSVCMethodResult.getResult() == "true";
			}

			public Item newItem()
			{
				return this._innovator.newItem();
			}
]]></method_code>
  <method_type>C#</method_type>
  <name>SSVC Viewers Sidebar Builder</name>
 </Item>
</AML>