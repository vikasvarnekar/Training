<AML>
 <Item type="Method" id="09C6C7EC8DCB4F30B16EE664F481F965" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[Innovator inn = this.getInnovator();
inn.ConsumeLicense("Aras.PublishingService");

string documentId = this.getID();
string documentType = this.getAttribute("type", "tp_Block");
string techDocPriveledgedPublisherId = "86F8574A13814269A1CEC0E012AEADB2";
string identityList = Aras.Server.Security.Permissions.Current.IdentitiesList;
if (identityList.IndexOf(techDocPriveledgedPublisherId, System.StringComparison.Ordinal) < 0)
{
	Item resultItem = inn.applyAML("<AML><Item action=\"get\" type=\"" 
		+ System.Security.SecurityElement.Escape(documentType) + "\" id=\"" 
		+ System.Security.SecurityElement.Escape(documentId) + "\" select=\"id\" /></AML>");
	if (resultItem.isError())
	{
		return resultItem;
	}
}
String conversionRuleName = this.getProperty("publishing_rule_name");
if (!String.IsNullOrEmpty(conversionRuleName)) {
	Item ruleItem = inn.newItem("ConversionRule", "get");
	ruleItem.setProperty("name", conversionRuleName);
	ruleItem.setAttribute("levels", "1");
	ruleItem = ruleItem.apply();

	if (!ruleItem.isError())
	{
		System.Web.Script.Serialization.JavaScriptSerializer jsSerializer = new System.Web.Script.Serialization.JavaScriptSerializer();
		Dictionary<String, String> taskData = new Dictionary<String, String>();

		Aras.ConversionFramework.Models.ConversionRule publishingRule = new Aras.ConversionFramework.Models.ConversionRule { Item = ruleItem };
		Aras.ConversionFramework.Management.InnovatorConversionManager cm = new Aras.ConversionFramework.Management.InnovatorConversionManager(inn.getConnection());

		taskData.Add("documentId", documentId);
		taskData.Add("documentItemType", documentType);

		Dictionary<string, string> conversionParamatersFromItem = new Dictionary<string, string>()
		{
			{"languageCode", "publishing_language"},
			{"filterCondition", "publishing_filters"},
			{"documentAllocation", "publishing_document_allocation"},
			{"resourceAllocation", "publishing_resource_allocation"},
			{"fileExtension", "publishing_file_extension"},
			// if value was not provided, then default method will be used during conversion (it defined in converter logic or ConversionSettings)
			{"contentBuilderMethod", "publishing_content_builder_method"},
			// 'documentWithSchemaBuilderMethod' parameter refers to the server-side method, that returns document item with expanded 'xml_schema' property, (shema item
			// with XmlSchemaOutputSettings relationships). Optional, by default 'tp_GetDocumentWithSchemaSettings' method will be used
			{"documentWithSchemaBuilderMethod", "publishing_document_with_schema_builder_method"}
		};

		foreach (string conversionParameterName in conversionParamatersFromItem.Keys)
		{
			string itemPropertyName = conversionParamatersFromItem[conversionParameterName];
			string conversionParameterValue = this.getProperty(itemPropertyName);

			if (conversionParameterValue != null)
			{
				taskData.Add(conversionParameterName, conversionParameterValue);
			}
		}

		Aras.Server.Security.Identity conversionManagerIdentity = Aras.Server.Security.Identity.GetById("694C8B27E5D940DAA8BD336E45EC3A63");
		bool conversionManagerPermsWasSet = Aras.Server.Security.Permissions.GrantIdentity(conversionManagerIdentity);
		string taskId;
		try
		{
			taskId = cm.CreateConversionTask(publishingRule, (task) => {
				task.UserData = jsSerializer.Serialize(taskData);
			});
		}
		finally
		{
			if (conversionManagerPermsWasSet)
			{
				Aras.Server.Security.Permissions.RevokeIdentity(conversionManagerIdentity);
			}
		}

		return inn.newResult(taskId);
	}
	else {
		return ruleItem;
	}
}
else {
	return inn.newError(CCO.ErrorLookup.Lookup("tp_SpecifyRuleNames"));
}]]></method_code>
  <method_type>C#</method_type>
  <name>tp_CreatePublishingTask</name>
 </Item>
</AML>