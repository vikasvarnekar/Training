<AML>
 <Item type="Method" id="C201ECA218214B07A0F663B087059B0D" action="add">
  <comments />
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[PublishingDialog = function() {
	var topWindow = aras.getMostTopWindowWithAras(window);

	this.dialogArguments = parent.frameElement.dialogArguments;
	this.documentItem = this.dialogArguments.documentItem;
	this.settings = {filter: '{}', language: 'en', conversionType: 'xml'};
	this.formControls = {};
	this.optionFamilies = this.dialogArguments.optionFamilies;
	this.optionFamiliesBuilderMethod = this.dialogArguments.optionFamiliesBuilderMethod || 'tp_GetOptionFamilies';
	this.pathModule = topWindow.Path;

	this.initializeControls();
};

PublishingDialog.prototype.initializeControls = function() {
	var serverResponce;

	// buttons section
	this.formControls.okButton = document.getElementById(document.fieldsTab['convert_button']);
	this.formControls.okButton.addEventListener('click', function() { this.convertDocument(this.documentItem); }.bind(this));

	this.formControls.closeButton = document.getElementById(document.fieldsTab['close_button']);
	this.formControls.closeButton.addEventListener('click', this.Close.bind(this));

	this.formControls.filterButton = document.getElementById(document.fieldsTab['filter_button']);
	this.formControls.filterButton.addEventListener('click', this.showFiltersDialog.bind(this));

	this.formControls.clearFilterButton = document.getElementById(document.fieldsTab['clear_filter_button']);
	this.formControls.clearFilterButton.addEventListener('click', function() { this.setFilterCondition(''); }.bind(this));

	// input section
	this.formControls.filterTextArea = document.querySelector('[id="' + document.fieldsTab['filter_condition'] + '"] textarea');
	this.formControls.fileExtensionInput = document.querySelector('[id="' + document.fieldsTab['file_extension_input'] + '"] input');

	// fill conversion formats
	this.formControls.coversionTypeList = getFieldComponentByName('conversion_format_list');
	this.setupDropdownField(this.formControls.coversionTypeList, {
		dropdownOptions: this.getOptionsFromListItem('tp_PublishingConversionFormat')
	});

	this.formControls.coversionTypeList.dom.addEventListener('change', this.ConversionTypeChanged.bind(this), false);
	this.formControls.fileExtensionInput.value = this.getConversionType();

	// fill conversion results
	this.formControls.coversionResultList = getFieldComponentByName('conversion_result_list');
	this.setupDropdownField(this.formControls.coversionResultList, {
		dropdownOptions: this.getOptionsFromListItem('tp_PublishingConversionResult')
	});

	// fill linked document allocation types
	this.formControls.documentAllocationList = getFieldComponentByName('linked_documents_list');
	this.setupDropdownField(this.formControls.documentAllocationList, {
		dropdownOptions: this.getOptionsFromListItem('tp_PublishingDocumentAllocation')
	});

	// fill resource allocation types
	this.formControls.resourceAllocationList = getFieldComponentByName('resource_allocation_list');
	this.setupDropdownField(this.formControls.resourceAllocationList, {
		dropdownOptions: this.getOptionsFromListItem('tp_PublishingResourceAllocation')
	});

	// fill language select
	this.formControls.languageList = getFieldComponentByName('language_list');
	this.setupDropdownField(this.formControls.languageList, {
		dropdownOptions: this.getLanguageOptions()
	});
};

PublishingDialog.prototype.getLanguageOptions = function() {
	var languageItemNodes = aras.getLanguagesResultNd().selectNodes('.//Item[@type="Language"]');
	var resultList = [];
	var currentNode;
	var i;

	const defaultLang = this.getDefaultLaguageCode();
	for (i = 0; i < languageItemNodes.length; i++) {
		currentNode = languageItemNodes[i];

		const languageOption = {
			label: aras.getItemProperty(currentNode, 'name'),
			value: aras.getItemProperty(currentNode, 'code')
		};

		if (languageOption.value === defaultLang) {
			resultList.unshift(languageOption);
		} else {
			resultList.push(languageOption);
		}
	}

	return resultList;
};

PublishingDialog.prototype.getDefaultLaguageCode = function() {
	let languageCode = aras.getVariable('tp_DefaultLanguageCode');

	if (!languageCode) {
		let methodItem = aras.newIOMItem('Method', 'tp_GetDefaultLanguageCode');

		methodItem = methodItem.apply();
		languageCode = methodItem.getResult();
		aras.setVariable('tp_DefaultLanguageCode', languageCode);
	}

	return languageCode;
};

/**
* @param {event} changeEvent
*/
PublishingDialog.prototype.ConversionTypeChanged = function(changeEvent) {
	var conversionType = this.getConversionType();

	this.formControls.fileExtensionInput.value = conversionType;

	if (conversionType === 'pdf') {
		this.formControls.resourceAllocationList.setDisabled(true);
	} else {
		this.formControls.resourceAllocationList.setDisabled(false);
	}
};

/**
* @param {String} listName
*/
PublishingDialog.prototype.getOptionsFromListItem = function(listName) {
	var listItem = aras.getItemByName('List', listName);
	var resultOptions = [];

	if (listItem) {
		var listValueNodes = listItem.selectNodes('Relationships/Item[@type="Value"]');

		if (listValueNodes.length) {
			var itemNode;

			for (i = 0; i < listValueNodes.length; i++) {
				itemNode = listValueNodes[i];
				resultOptions.push({
					label: aras.getItemProperty(itemNode, 'label'),
					value: aras.getItemProperty(itemNode, 'value')
				});
			}
		}
	}

	return resultOptions;
};

PublishingDialog.prototype.setupDropdownField = function(targetField, setupParameters) {
	setupParameters = setupParameters || {};

	if (targetField && targetField.component) {
		targetField.component.format = this._dropDownFormatter;

		this._disableFieldManualEditing(targetField);

		if (setupParameters.dropdownOptions) {
			targetField.component.setState({
				list: setupParameters.dropdownOptions,
				value: setupParameters.selectedValue || setupParameters.dropdownOptions[0].value
			});
		}
	}
};

PublishingDialog.prototype._dropDownFormatter = function(format) {
	var dropDownFormat = format.children[3];
	var inputNode = this.state.refs.input;

	dropDownFormat.style.top = (inputNode.offsetHeight - 1) + 'px';
	dropDownFormat.style.maxHeight = '100px';
};

PublishingDialog.prototype._disableFieldManualEditing = function(targetField) {
	if (targetField && targetField.component) {
		targetField.component._getInputTemplate = this._getManualEditDisabledTemplate;
	}
};

PublishingDialog.prototype._getManualEditDisabledTemplate = function() {
	// template is overriden in order to disable manual input (value can be changed only with dropdown)
	// current component implementation doesn't support such customization and this code can be remove if it happens
	var label = this._getCurrentInputValue();

	return {
		tag: 'span',
		className: 'aras-filter-list__input aras-form-input',
		attrs: {
			style: 'display:inline-flex;align-items:center;',
			tabindex: '1'
		},
		children: [label],
		events: {
			onblur: function(blurEvent) {
				this._onInputFocusoutHandler(blurEvent);
			}.bind(this),
			onmousedown: function(e) {
				if (!this.state.disabled) {
					this._onButtonClickHandler(e);
				}
			}.bind(this),
			onchange: function(e) {
				this.setState({
					value: this.state.predictedValue
				});
			}.bind(this)
		},
		ref: function(node) {
			this.state.refs.input = node;
		}.bind(this)
	};
};

PublishingDialog.prototype.getConversionType = function() {
	return this.formControls.coversionTypeList.getValue();
};

PublishingDialog.prototype.getConversionResult = function() {
	return this.formControls.coversionResultList.getValue();
};

PublishingDialog.prototype.getDocumentAllocation = function() {
	return this.formControls.documentAllocationList.getValue();
};

PublishingDialog.prototype.getResourceAllocation = function() {
	return this.formControls.resourceAllocationList.getValue();
};

PublishingDialog.prototype.getSelectedLanguage = function() {
	return this.formControls.languageList.getValue();
};

PublishingDialog.prototype.getFileExtension = function() {
	var languageSelect = this.formControls.languageList;

	return this.formControls.fileExtensionInput.value;
};

PublishingDialog.prototype.getFilterCondition = function() {
	return this.settings.filter;
};

/**
* @param {String} filterCondition
*/
PublishingDialog.prototype.setFilterCondition = function(filterCondition) {
	this.settings.filter = filterCondition || '{}';
	this.formControls.filterTextArea.value = (this.settings.filter !== '{}') ?
		filterCondition.replace(/\]\,/g, '\n').replace(/[\[\]\{\}\"]/g, '').replace(/\:/g, ' - ') : '';
};

/**
* @param {Item} targetDocumentItem
*/
PublishingDialog.prototype.convertDocument = function(targetDocumentItem) {
	var spinner = parent.document.getElementById('dimmer_spinner');
	spinner.style.display = 'block';

	var documentItem = aras.newIOMItem();
	var conversionType = this.getConversionType();
	var conversionRuleName;
	var createTaskResult;
	var taskId;
	var mainWindow = aras.getMainWindow();

	switch (conversionType) {
		case 'xml':
			conversionRuleName = 'tp_XmlPublishingRule';
			break;
		case 'pdf':
			var consumeLicenseResult = aras.ConsumeLicense('Aras.HTMLtoPDFConverter');
			if (consumeLicenseResult.isError) {
				if (consumeLicenseResult.errorMessage.indexOf('FeatureHasNoLicensesException') > -1 ||
					consumeLicenseResult.errorMessage.indexOf('FeatureLicenseValidationException') > -1) {
					aras.AlertWarning(aras.getResource('../Modules/aras.innovator.TDF', 'helper.feature_has_no_license', 'Aras.HTMLtoPDFConverter'));
				} else {
					aras.AlertError(consumeLicenseResult.errorMessage);
				}
				spinner.style.display = 'none';
				return;
			}
			conversionRuleName = 'tp_PdfPublishingRule';
			break;
		case 'html':
			conversionRuleName = 'tp_HtmlPublishingRule';
			break;
		default:
			aras.AlertError(aras.getResource('../Modules/aras.innovator.TDF', 'includes.conversiontypenotsupported'));
			spinner.style.display = 'none';
			return;
	}

	// create Conversion task with appropriate CoversionRule
	documentItem.loadAML(targetDocumentItem.node.xml);
	documentItem.setProperty('publishing_language', this.getSelectedLanguage());
	documentItem.setProperty('publishing_filters', this.getFilterCondition());
	documentItem.setProperty('publishing_rule_name', conversionRuleName);
	documentItem.setProperty('publishing_file_extension', this.getFileExtension());
	documentItem.setProperty('publishing_document_allocation', this.getDocumentAllocation());
	documentItem.setProperty('publishing_resource_allocation', conversionType === 'pdf' ? 'source' : this.getResourceAllocation());

	// this property value is a default TDF content builder method,
	// if another method should be used please provide field for selection or other value in your publishing dialog
	documentItem.setProperty('publishing_content_builder_method', 'tp_DocumentGet');

	createTaskResult = documentItem.apply('tp_CreatePublishingTask');
	taskId = createTaskResult.getResult();

	// if task was created
	if (taskId) {
		var targetWindow = window === mainWindow ? mainWindow.main : window;
		var self = this;
		var dialogParameters = {
			dialogWidth: 300, dialogHeight: 160, resizable: false,
			aras: aras,
			itemType: 'ConversionTask',
			itemId: taskId,
			propertyName: 'status',
			propertyState: ['Succeeded', 'Failed', 'Discarded'],
			title: aras.getResource('../Modules/aras.innovator.TDF', 'includes.waitfortaskcompletion'),
			timeout: 300000, //5 min
			content: 'waitPropertyStatusDialog.html',
			hideSpinner: function() {
				spinner.style.display = 'none';
			}
		};

		targetWindow.ArasModules.Dialog.show('iframe', dialogParameters).promise.then(function(taskState) {
			if (taskState === 'Succeeded') {
				setTimeout(function() {
					self.processConversionResult(taskId);
				}, 0);
			} else if (taskState === '_timeout') {
				aras.AlertError(aras.getResource('../Modules/aras.innovator.TDF', 'publishing.timeout_reached'));
			}
		});
	}
};

PublishingDialog.prototype.showFiltersDialog = function() {
	var dialogParameters;
	var dialogOptions;
	var mainWindow;
	var targetWindow;

	// search allowed optionFamilies
	if (!this.optionFamilies) {
		var response = aras.soapSend('ApplyItem', '<Item type="' + this.documentItem.getType()  + '" action="' + this.optionFamiliesBuilderMethod + '" id="' +
			this.documentItem.getID() + '" />');

		if (!response.isFault()) {
			this.optionFamilies = JSON.parse(response.getResult().text);
		} else {
			aras.AlertError(response);
			return;
		}
	}

	// if option families are exist for technical document, then show filters dialog
	mainWindow = aras.getMainWindow();
	targetWindow = window === mainWindow ? mainWindow.main : window;

	dialogParameters = {
		dialogWidth: 322, dialogHeight: 375,
		title: 'Select Document Filters',
		formId: '68962F55F96E4583AD53676C3BEF91EC', // tp_ChangeBlockCondition Form
		aras: aras,
		isEditMode: true,
		isDisabled: false,
		condition: JSON.parse(this.getFilterCondition()),
		externalcondition: {},
		optionFamilies: this.optionFamilies,
		content: 'ShowFormAsADialog.html'
	};

	this.dialogArguments.parentWindow.ArasModules.Dialog.show('iframe', dialogParameters).promise.then(function(result) {
		if (result) {
			this.setFilterCondition(JSON.stringify(result));
		}
	}.bind(this));
};

/**
* @param {String} taskId
*/
PublishingDialog.prototype.processConversionResult = function(taskId) {
	var conversionResult = aras.soapSend('ApplyItem', '<Item type="ConversionTaskResult" action="get" select="file_id"><source_id>' +
		taskId + '</source_id></Item>');

	if (!conversionResult.isFault()) {
		var resultItem = conversionResult.getResult().selectSingleNode('Item');
		var fileId = aras.getItemProperty(resultItem, 'file_id');
		var fileItem = aras.soapSend('ApplyItem', '<Item type="File" action="get" id="' + fileId + '"></Item>');

		if (!fileItem.isFault()) {
			var resultAction = this.getConversionResult();
			var fileNode = fileItem.getResult().selectSingleNode('Item');

			switch (resultAction) {
				case 'window':
					this.showConvertedFile(fileNode);
					break;
				case 'file':
					var documentName = this.documentItem.getProperty('name');

					this.downloadConvertedFile(fileNode, documentName);
					break;
			}
		}
	}
};

/**
* @param {ItemNode} fileNode
*/
PublishingDialog.prototype.showConvertedFile = function(fileNode) {
	if (fileNode) {
		aras.uiShowItemEx(fileNode, undefined);
	}
};

/**
* @param {ItemNode} fileNode
* @param {String} preferedFileName
*/
PublishingDialog.prototype.downloadConvertedFile = function(fileNode, preferedFileName) {
	if (fileNode) {
		var fileName = preferedFileName || aras.getItemProperty(fileNode, 'filename');
		var downloadResult = aras.downloadFile(fileNode);

		if (downloadResult) {
			aras.AlertSuccess(aras.getResource('', 'file_management.file_succesfully_downloaded', fileName), aras.getMostTopWindowWithAras(window));
		}
	}
};

PublishingDialog.prototype.Close = function() {
	this.dialogArguments.dialog.close();
};

aras.ConsumeLicense('Aras.PublishingService');
// Create instance
PublishingDialog = new PublishingDialog();
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>tp_PublishingDialogAPI</name>
 </Item>
</AML>