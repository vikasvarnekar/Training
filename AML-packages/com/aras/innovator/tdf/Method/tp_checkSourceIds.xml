<AML>
 <Item type="Method" id="D9E2C3293C2E482C889DB60C452B6EBF" action="add">
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[callContext = CCO;
var currentType = this.getType();
string originXmlSchemaSourceId = this.getProperty("source_id");

if (currentType.Equals("tp_Stylesheet")) {
    List<string> StylesheetsIdsChain = new List<string>();
    return checkParentStylesheet(this, StylesheetsIdsChain, originXmlSchemaSourceId);
} else if (currentType.Equals("tp_XmlSchemaOutputSetting")) {
    return checkXmlSchemaSources(this, originXmlSchemaSourceId);
} else {
    return this;
}

}
Aras.Server.Core.CallContext callContext;

#region Methods
private Aras.IOM.Item checkXmlSchemaSources (Aras.IOM.Item currentXmlSchema, string originXmlSchemaSourceId) {
    var stylesheetId = this.getProperty("stylesheet_id", "");
    if (String.IsNullOrEmpty(stylesheetId)) {
	    return this;
    }
    
    var stylesheet = this.getInnovator().newItem("tp_Stylesheet", "get");
    stylesheet.setID(stylesheetId);
    stylesheet = stylesheet.apply();
    
    if (checkIsOtherSourceId(originXmlSchemaSourceId, stylesheet.getProperty("source_id"))) {
        return this.getInnovator().newError(callContext.ErrorLookup.Lookup("tp_XmlDifferentSources"));
    }
    return this;
}

private Aras.IOM.Item checkParentStylesheet (Aras.IOM.Item currentStylesheet, IList<string> StylesheetsIdsChain, string originXmlSchemaSourceId) {
    var currentStylesheetId = currentStylesheet.getID();
    
    if (checkIsRecursiveStylesheet(StylesheetsIdsChain, currentStylesheetId)) {
        return this.getInnovator().newError(callContext.ErrorLookup.Lookup("tp_RecursiveStylesheets"));
    }
    
    StylesheetsIdsChain.Add(currentStylesheetId);
    
    if (checkIsOtherSourceId(originXmlSchemaSourceId, currentStylesheet.getProperty("source_id"))) {
        return this.getInnovator().newError(callContext.ErrorLookup.Lookup("tp_StylesheetsDifferentSources"));
    }
    
    var parentStylesheetId = currentStylesheet.getProperty("parent_stylesheet", "");
    if (String.IsNullOrEmpty(parentStylesheetId)) {
	    return this;
    } 

    var stylesheet = this.getInnovator().newItem("tp_Stylesheet", "get");
    stylesheet.setID(parentStylesheetId);
    stylesheet = stylesheet.apply();
    
    return checkParentStylesheet(stylesheet, StylesheetsIdsChain, originXmlSchemaSourceId);
}

private static bool checkIsRecursiveStylesheet (IList<string> StylesheetsIdsChain, string currentId) {
    if (StylesheetsIdsChain.IndexOf(currentId) >= 0) {
        return true;
    }
    return false;
}
#endregion Methods

private static bool checkIsOtherSourceId (string originSource, string currentSource) {
    if (!originSource.Equals(currentSource)) {
        return true;
    }
    return false;
]]></method_code>
  <method_type>C#</method_type>
  <name>tp_checkSourceIds</name>
 </Item>
</AML>