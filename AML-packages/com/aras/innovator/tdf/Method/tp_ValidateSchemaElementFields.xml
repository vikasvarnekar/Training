<AML>
 <Item type="Method" id="FDA99688264445D3A3200F900DFF47FC" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[	return MethodLogic(new DataAccessLayer(CCO.ErrorLookup));
}

internal Item MethodLogic(IDataAccessLayer dataAccessLayer)
{
	XmlNodeList invalidProps = this.dom.SelectNodes("//*[@fieldInvalid]");
	if (invalidProps.Count > 0)
	{
		Innovator innovator = this.getInnovator();
		List<string> invalidParameters = new List<string>();
		foreach (XmlNode property in invalidProps)
		{
			string parameterError = string.Format(CultureInfo.InvariantCulture, "\n\"{0}\": {1}", property.Name, property.Attributes["fieldInvalid"].Value);
			invalidParameters.Add(parameterError);
		}
		string textContent = dataAccessLayer.LookupError("tp_XmlSchemaElementParametersAreInvalid", string.Join(", ", invalidParameters.ToArray()));
		return innovator.newError(textContent);
	}
	return this;
}

internal interface IDataAccessLayer
{
	string LookupError(string name, string parameter);
}

internal class DataAccessLayer:IDataAccessLayer
{
	private Aras.Server.Core.ErrorLookup errorLookup;

	internal DataAccessLayer(Aras.Server.Core.ErrorLookup errorLookup)
	{
		this.errorLookup = errorLookup;
	}

	public string LookupError(string name, string parameter)
	{
		return errorLookup.Lookup(name, parameter);
	}
]]></method_code>
  <method_type>C#</method_type>
  <name>tp_ValidateSchemaElementFields</name>
 </Item>
</AML>