<AML>
 <Item type="Method" id="4E68BCDCCE224BAFB9302F1D18DB2685" action="add">
  <comments>Site Preference validation</comments>
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[
			Innovator innovator = this.getInnovator();
			IDataAccessLayer dataAccessLayer = new DataAccessLayer(innovator);
			var sitePreferenceValidator = new SitePreferenceValidator(dataAccessLayer, CCO.XML);
			string errorMessage;
			if (!sitePreferenceValidator.IsValid(this.node, out errorMessage))
			{
				return innovator.newError(errorMessage);
			}

			return this;
		}

		internal class SitePreferenceValidator
		{
			private readonly IDataAccessLayer _dataAccessLayer;
			private readonly Aras.Server.Core.XmlProxy _xmlHelper;

			public SitePreferenceValidator(IDataAccessLayer dataAccessLayer, Aras.Server.Core.XmlProxy xmlHelper)
			{
				_dataAccessLayer = dataAccessLayer;
				_xmlHelper = xmlHelper;
			}

			public bool IsValid(XmlElement node, out string errorMessage)
			{
				Hashtable rowTypes = new Hashtable();
				rowTypes.Add("act", "Activity");
				rowTypes.Add("wbs", "wbs");
				rowTypes.Add("mil", "Milestone");
				string gridLayoutName = "PM_ProjectGridLayout";
				string colDescrName = "PM_ProjectColumnDescription";
				XmlNodeList glItems = node.SelectNodes("Relationships/Item[@type='" + gridLayoutName + "'][not(@action='delete')][not(is_system='1')]");

				for (int i = 0; i < glItems.Count; i++)
				{
					XmlNode glItem = glItems[i];
					string pos = _xmlHelper.GetItemProperty(glItem, "position");
					XmlNodeList cdItems = glItem.SelectNodes("Relationships/Item[@type='" + colDescrName + "'][not(@action='delete')]");
					if (cdItems.Count == 0)
					{
						var projectGridLayoutId = ((XmlElement)glItem).GetAttribute("id");
						var resItem = _dataAccessLayer.GetProjectColumnDescription(projectGridLayoutId);
						XmlDocument resAML = resItem.dom;

						if (resAML.DocumentElement.SelectSingleNode("Item") != null)
						{
							errorMessage = "'" + gridLayoutName + "' item with position='" + pos + "' has no '" + colDescrName + "' items";
							return false;
						}
						else
						{
							continue; //it's mean that PM_ProjectColumnDescription already in database and additional checking 
						}
					}
					Hashtable uniqs = new Hashtable();

					for (int j = 0; j < cdItems.Count; j++)
					{
						XmlNode cdItem = cdItems[j];
						string row_type = _xmlHelper.GetItemProperty(cdItem, "row_type");
						string data_source = _xmlHelper.GetItemProperty(cdItem, "data_source");
						if (string.IsNullOrEmpty(row_type))
						{
							errorMessage = "'" + gridLayoutName + "' item with position='" + pos + "' has '" + colDescrName + "' item with empty ItemType";
							return false;
						}

						if (string.IsNullOrEmpty(data_source))
						{
							errorMessage = "'" + gridLayoutName + "' item with position='" + pos + "' has '" + colDescrName + "' item with empty Property";
							return false;
						}

						if (!uniqs.ContainsKey(row_type))
						{
							uniqs[row_type] = 1;
						}
						else
						{
							uniqs[row_type] = (int)uniqs[row_type] + 1;
						}
					}

					string msg = "";
					IDictionaryEnumerator uniqs_enmrtr = uniqs.GetEnumerator();
					while (uniqs_enmrtr.MoveNext())
					{
						if ((int)uniqs_enmrtr.Value > 1)
						{
							msg += uniqs_enmrtr.Value + " " + colDescrName + "' items of " + rowTypes[uniqs_enmrtr.Key] + " row type, ";
						}
					}

					if (!string.IsNullOrEmpty(msg))
					{
						errorMessage = "'" + gridLayoutName + "' item with position='" + pos + "' has '" + msg + "but it should has only one instance of each type.";
						return false;
					}
				}

				errorMessage = null;
				return true;
			}
		}

		internal interface IDataAccessLayer
		{
			Item GetProjectColumnDescription(string projectGridLayoutId);
		}

		private class DataAccessLayer : IDataAccessLayer
		{
			private readonly Innovator _innovator;

			public DataAccessLayer(Innovator innovator)
			{
				_innovator = innovator;
			}

			public Item GetProjectColumnDescription(string projectGridLayoutId)
			{
				var qryItem = _innovator.newItem("PM_ProjectColumnDescription", "get");
				qryItem.setProperty("source_id", projectGridLayoutId);
				return qryItem.apply();
			}
			]]></method_code>
  <method_type>C#</method_type>
  <name>ValidateSitePreference</name>
 </Item>
</AML>