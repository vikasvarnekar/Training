<AML>
 <Item type="Method" id="DE3BA036F61D4829B572568D44AEB3BA" action="add">
  <comments />
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[string documentId = this.getProperty("source_id");
if (!string.IsNullOrEmpty(documentId) && RequestState.Contains(documentId) && (RequestState[documentId] is List<string>))
{ // whole document is being deleted
    return this;
}

// get current ids
string elementName = this.getType();
Item getThisItem = this.newItem(elementName, "get");
getThisItem.setID(this.getID());
getThisItem.setAttribute("select", "source_id,reference_id");
getThisItem = getThisItem.apply();
documentId = getThisItem.getProperty("source_id");
string elementReferenceId = getThisItem.getProperty("reference_id");

if (RequestState.Contains(documentId) && (RequestState[documentId] is List<string>))
{ // whole document is being deleted
    return this;
}

// get structure
Dictionary<string, ElementInfo> cache = RequestState[documentId] as Dictionary<string, ElementInfo>; // key = element.Name (name of autogenerated ItemType)
if (cache == null)
{
    RequestState[documentId] = cache = new Dictionary<string, ElementInfo>();
}
ElementInfo thisElement;
if (!cache.TryGetValue(elementName, out thisElement))
{
    cache[elementName] = thisElement = new ElementInfo(this);
}

// remove properties
foreach (string property in thisElement.PropertyNames)
{
    string sqlAmlEscapedDocumentId = System.Security.SecurityElement.Escape(CCO.DB.InnDatabase.QuoteValue(documentId));
    string sqlAmlEscapedElementReferenceId = System.Security.SecurityElement.Escape(CCO.DB.InnDatabase.QuoteValue(elementReferenceId));
    Item deletePropertyItems = this.newItem(property, "delete");
    deletePropertyItems.setAttribute("where", string.Format(CultureInfo.InvariantCulture,
        "([source_id]='{0}' and [element_reference_id]='{1}')",
        sqlAmlEscapedDocumentId, sqlAmlEscapedElementReferenceId));
    deletePropertyItems = deletePropertyItems.apply();
}

// remove child elements
foreach (string childElement in thisElement.ChildElementNames)
{
    string sqlAmlEscapedDocumentId = System.Security.SecurityElement.Escape(CCO.DB.InnDatabase.QuoteValue(documentId));
    string sqlAmlEscapedElementReferenceId = System.Security.SecurityElement.Escape(CCO.DB.InnDatabase.QuoteValue(elementReferenceId));
    Item deleteElementItems = this.newItem(childElement, "delete");
    deleteElementItems.setAttribute("where", string.Format(CultureInfo.InvariantCulture,
        "([source_id]='{0}' and [parent_reference_id]='{1}')",
        sqlAmlEscapedDocumentId, sqlAmlEscapedElementReferenceId));
    deleteElementItems.apply();
}

return this;
}

class ElementInfo
{
    public string Name
    { get; private set; }
    
    public List<string> PropertyNames
    { get; private set; }
    
    public List<string> ChildElementNames
    { get; private set; }
    
    public ElementInfo(Item elementItem)
    {
        this.Name = elementItem.getType();
        
        Item getElementItem = elementItem.newItem("cmf_ElementType", "get");
        getElementItem.setAttribute("select", "id");
        getElementItem.setProperty("name", this.Name);
        Item getPropertiesItem = elementItem.newItem("cmf_PropertyType", "get");
        getPropertiesItem.setAttribute("select", "name");
        getElementItem.addRelationship(getPropertiesItem);
        getElementItem = getElementItem.apply();
        this.PropertyNames = new List<string>();
        Item propertiesItem = getElementItem.getRelationships("cmf_PropertyType");
        for (int i = 0; i < propertiesItem.getItemCount(); i++)
        {
            Item propertyItem = propertiesItem.getItemByIndex(i);
            this.PropertyNames.Add(propertyItem.getProperty("name"));
        }

        Item getChildElementsItem = elementItem.newItem("cmf_ElementType", "get");
        getChildElementsItem.setAttribute("select", "id, name");
        getChildElementsItem.setProperty("parent", getElementItem.getID());
        getChildElementsItem = getChildElementsItem.apply();
        this.ChildElementNames = new List<string>();
        for (int i = 0; i < getChildElementsItem.getItemCount(); i++)
        {
            this.ChildElementNames.Add(getChildElementsItem.getItemByIndex(i).getProperty("name"));
        }
    }
}

void fin()
{]]></method_code>
  <method_type>C#</method_type>
  <name>cmf_ElementDelete</name>
 </Item>
</AML>