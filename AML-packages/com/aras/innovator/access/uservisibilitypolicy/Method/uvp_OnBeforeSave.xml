<AML>
 <Item type="Method" id="EB7A2A4FFAD7476894D6403F6F04D98A" action="add">
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[Innovator inn = this.getInnovator();
var prohibitedClasses = new List <string>
{
	"System",
	"Team"
};
string messageTemplate = CCO != null ? CCO.ErrorLookup.Lookup("uvp_NotSupportedIdentity") : "uvp_NotSupportedIdentity {0}";
string sourceIdentityId = this.getProperty("source_identity_id", string.Empty);
if (!string.IsNullOrEmpty(sourceIdentityId))
{
	Item identity = inn.getItemById("Identity", sourceIdentityId);
	if (identity.isError())
	{
		return identity;
	}
	var classification = identity.getProperty("classification");
	if (prohibitedClasses.Contains(classification, StringComparer.Ordinal))
	{
		string name = identity.getProperty("name");
		//Rewrite when CCO methods call become mockable
		string message = string.Format(CultureInfo.InvariantCulture, messageTemplate, name);
		return inn.newError(message);
	}
}
string accessIdentityId = this.getProperty("access_identity_id", string.Empty);
if (!string.IsNullOrEmpty(accessIdentityId))
{
	Item identity = inn.getItemById("Identity", accessIdentityId);
	if (identity.isError())
	{
		return identity;
	}
	var classification = identity.getProperty("classification");
	if (prohibitedClasses.Contains(classification, StringComparer.Ordinal))
	{
		string name = identity.getProperty("name");
		string message = string.Format(CultureInfo.InvariantCulture, messageTemplate, name);
		return inn.newError(message);
	}
}
return this;]]></method_code>
  <method_type>C#</method_type>
  <name>uvp_OnBeforeSave</name>
 </Item>
</AML>