<AML>
 <Item type="Method" id="868FE76FEFB14B37A1A5573434F021A7" action="add">
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[Aras.Server.Core.ICachePublicAPI innovatorServerCache = GetInnovatorServerCache(CCO);

//The method is designed in a way, when it can be used with event version equals to 'Version 1' or 'Version 2'.
//The event version 'Version 2' is stricter than 'Version 1' and doesn't have incoming item of the current processing.
//It can be useful when the server-side method cannot get the just applied item due to security reason, but it's good
//enough to get unstricted info about the item - applied item id and corresponding ItemType name/id, which are given
//by the Innovator Server for the 'Version 2' (depending on event types for sure).
//So, that's why there is a try to get ItemType information based on the incoming 'eventData' object.
Item itemTypeInfoRequestItemForCurrentProcessingItem = BuildItemTypeInfoRequestItem(eventData);
Item effectivityVariableItems = GetEffectivityVariableOfTypeItem(itemTypeInfoRequestItemForCurrentProcessingItem);

int effectivityVariableItemCount = effectivityVariableItems.getItemCount();
for (int i = 0; i < effectivityVariableItemCount; i++)
{
	Item effectivityVariableItem = effectivityVariableItems.getItemByIndex(i);
	innovatorServerCache.ClearCachedItemById(EffectivityVariableItemTypeName, effectivityVariableItem.getID());
}

return this;
}

internal const string EffectivityVariableItemTypeName = "effs_variable";

[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "OnAfterCopy")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "OnAfterAdd")]
internal virtual Item BuildItemTypeInfoRequestItem(object eventData)
{
	Item itemTypeInfoItem = this.newItem("ItemType", "get");
	itemTypeInfoItem.setAttribute("select", "id");

	//There is no an interface, that would be common for the types 'OnAfterAddEventArgs' and 'OnAfterCopyEventArgs'
	//and could be used to omit redundant type castings and checks
	Aras.Server.Core.OnAfterAddEventArgs onAfterAddEventArgs = eventData as Aras.Server.Core.OnAfterAddEventArgs;
	if (onAfterAddEventArgs != null)
	{
		itemTypeInfoItem.setID(onAfterAddEventArgs.TypeId);
	}
	else
	{
		Aras.Server.Core.OnAfterCopyEventArgs onAfterCopyEventArgs = eventData as Aras.Server.Core.OnAfterCopyEventArgs;
		if (onAfterCopyEventArgs != null)
		{
			string namePropertyValue = "'" + string.Join("','", onAfterCopyEventArgs.CopyResults.Values.Select(i => i.ItemTypeName).Distinct()) + "'";

			itemTypeInfoItem.setProperty("name", namePropertyValue);
			itemTypeInfoItem.setPropertyCondition("name", "in");
		}
		else
		{
			throw new Aras.Server.Core.InnovatorServerException("The method supports only 'OnAfterAdd' and 'OnAfterCopy' event types");
		}
	}

	return itemTypeInfoItem;
}

internal virtual Item GetEffectivityVariableOfTypeItem(Item itemTypeInfoRequestItem)
{
	Item lookupEffectivityVariableItem = this.newItem(EffectivityVariableItemTypeName, "get");
	lookupEffectivityVariableItem.setAttribute("select", "id");
	lookupEffectivityVariableItem.setProperty("variable_type", "item");
	lookupEffectivityVariableItem.setPropertyItem("itemtype_id", itemTypeInfoRequestItem);
	lookupEffectivityVariableItem.setPropertyCondition("itemtype_id", "in");
	lookupEffectivityVariableItem = lookupEffectivityVariableItem.apply();

	if (lookupEffectivityVariableItem.isError() && !lookupEffectivityVariableItem.isEmpty())
	{
		throw new Aras.Server.Core.InnovatorServerException(lookupEffectivityVariableItem.dom);
	}

	return lookupEffectivityVariableItem;
}

internal virtual Aras.Server.Core.ICachePublicAPI GetInnovatorServerCache(Aras.Server.Core.CallContext callContext)
{
	return callContext.Cache;]]></method_code>
  <method_type>C#</method_type>
  <name>effs_scopeCacheInvalidOnAddItem</name>
 </Item>
</AML>