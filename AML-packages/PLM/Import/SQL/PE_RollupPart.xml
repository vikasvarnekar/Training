<AML>
 <Item type="SQL" id="457CBD8D19CB48219B00C74A4D687AD1" action="add">
  <execution_flag>immediate</execution_flag>
  <old_name>PE_RollupPart</old_name>
  <sqlserver_body><![CDATA[/*
name: PE_RollupPart
solution: PLM
created: 02-OCT-2006
purpose: Rollup Part cost (weight) when Part BOM or Part Goal is modified.
notes: When Part BOM is added, updated or deleted the procedure is called for corresponding Part.
*/

CREATE PROCEDURE PE_RollupPart(@id CHAR(32), @itemType VARCHAR(10))
AS
BEGIN
/*
arguments:
@id
@itemType - ItemType name.
*/
  DECLARE @COST_or_WEIGHT_CHANGED BIT
  DECLARE @partId CHAR(32)
  DECLARE @spError INT; /* error code returned by a called stored procedure */
  
  IF (@itemType='Part')
    SET @partId = @id;
  ELSE IF (@itemType='Part BOM')
  BEGIN
    SELECT @partId=source_id
    FROM PART_BOM
    WHERE id=@id;
  END
  ELSE IF (@itemType='Part Goal')
  BEGIN
    SELECT @partId=source_id
    FROM PART_GOAL
    WHERE id=@id;
  END
  -- using aliads data type for property Cost of Part, where 074E4827E5044F8BA6B6FD546E21D271 is id of property.
  DECLARE @OLD_COST DATA_TYPE_074E4827E5044F8BA6B6FD546E21D271;
  -- using aliads data type for property Weight of Part, where 2E05616329F846C78C0A8F8468AC1EF8 is id of property.
  DECLARE @OLD_WEIGHT DATA_TYPE_2E05616329F846C78C0A8F8468AC1EF8;
  DECLARE @OLD_COST_BASIS VARCHAR(64);
  DECLARE @OLD_WEIGHT_BASIS VARCHAR(64);
  
  SELECT @OLD_COST=cost, @OLD_WEIGHT=weight, @OLD_COST_BASIS=cost_basis, @OLD_WEIGHT_BASIS=weight_basis
  FROM PART

  WHERE id=@partId;
   -- using aliads data type for property Cost of Part, where 074E4827E5044F8BA6B6FD546E21D271 is id of property.
  DECLARE @NEW_COST DATA_TYPE_074E4827E5044F8BA6B6FD546E21D271;
  -- using aliads data type for property Weight of Part, where 2E05616329F846C78C0A8F8468AC1EF8 is id of property.
  DECLARE @NEW_WEIGHT DATA_TYPE_2E05616329F846C78C0A8F8468AC1EF8;
  DECLARE @NEW_COST_BASIS VARCHAR(64);
  DECLARE @NEW_WEIGHT_BASIS VARCHAR(64);
  
  DECLARE @COST_WAS_SET BIT;
  DECLARE @WEIGHT_WAS_SET BIT;
  SET @COST_WAS_SET   = 0;
  SET @WEIGHT_WAS_SET = 0;
  
  DECLARE @COST_WAS_CHANGED BIT;
  DECLARE @WEIGHT_WAS_CHANGED BIT;
  SET @COST_WAS_CHANGED   = 0;
  SET @WEIGHT_WAS_CHANGED = 0;
  
  -- 1. Set cost to NULL on a Part if there is no Part Goal with goal='Cost'
  UPDATE PART
  SET cost=NULL, cost_basis=NULL
  FROM PART
  WHERE id=@partId AND NOT EXISTS (SELECT id FROM PART_GOAL WHERE source_id=@partId AND goal='Cost');
  
  IF (@@ROWCOUNT = 1)
  BEGIN
    SET @NEW_COST = NULL;
    SET @NEW_COST_BASIS = NULL;
    SET @COST_WAS_SET = 1;
    
    IF (@OLD_COST IS NOT NULL) OR (@OLD_COST_BASIS IS NOT NULL)
    BEGIN
      SET @COST_WAS_CHANGED = 1;
    END
  END
  
  -- 2. Set weight to NULL on a Part if there is no Part Goal with goal='Weight'
  UPDATE PART
  SET weight=NULL, weight_basis=NULL
  FROM PART
  WHERE id=@partId AND NOT EXISTS (SELECT TOP 1 id FROM PART_GOAL WHERE source_id=@partId AND goal='Weight');
  
  IF (@@ROWCOUNT = 1)
  BEGIN
    SET @NEW_WEIGHT = NULL;
    SET @NEW_WEIGHT_BASIS = NULL;
    SET @WEIGHT_WAS_SET = 1;
    
    IF (@OLD_WEIGHT IS NOT NULL) OR (@OLD_WEIGHT_BASIS IS NOT NULL)
    BEGIN
      SET @WEIGHT_WAS_CHANGED = 1;
    END
  END
  
  -- 3. If cost was not set to NULL or weight was not set to NULL this means there are Part Goals on a current Part.
  --    Check if there are Part BOMs on a current Part.
  DECLARE @THERE_ARE_BOMS BIT;
  IF (@COST_WAS_SET = 0) OR (@WEIGHT_WAS_SET = 0)
  BEGIN
    IF EXISTS(SELECT TOP 1 id FROM PART_BOM WHERE source_id=@partId)
      SET @THERE_ARE_BOMS = 1;
    ELSE
      SET @THERE_ARE_BOMS = 0;
  END
  
  -- 4. If cost was not set to NULL - calculate new value for a cost.
  IF (@COST_WAS_SET = 0)
  BEGIN
    IF (@THERE_ARE_BOMS = 0)
    BEGIN
      UPDATE PART_GOAL
      SET calculated_value=NULL
      WHERE source_id=@partId AND goal='Cost';
    END
    ELSE
    BEGIN
      UPDATE PART_GOAL
      SET calculated_value=(SELECT
        CASE
          WHEN SUM(
            CASE child_p.cost_basis
              WHEN 'Actual' THEN 0
              WHEN 'Calculated' THEN 0
              WHEN 'Estimated' THEN 0
              ELSE 1
            END
          ) > 0 THEN NULL
          ELSE SUM( ISNULL(child_p.cost,0)*ISNULL(child_pb.quantity, 0) )
        END
        FROM PART_BOM child_pb INNER JOIN PART child_p ON child_pb.related_id=child_p.id
        WHERE child_pb.source_id=@partId)
      WHERE source_id=@partId;
    END
    
    SELECT TOP 1 @NEW_COST=ISNULL(actual_value,ISNULL(calculated_value,ISNULL(estimated_value,target_value))),
      @NEW_COST_BASIS=CASE
        WHEN actual_value IS NOT NULL THEN 'Actual'
        WHEN calculated_value IS NOT NULL THEN 'Calculated'
        WHEN estimated_value IS NOT NULL THEN 'Estimated'
        WHEN target_value IS NOT NULL THEN 'Target'
        ELSE NULL
      END
    FROM PART_GOAL
    WHERE source_id=@partId AND goal='Cost';
    
    IF (@NEW_COST IS NULL AND @OLD_COST IS NOT NULL) OR
       (@OLD_COST IS NULL AND @NEW_COST IS NOT NULL) OR
       (@NEW_COST != @OLD_COST) OR
       (@NEW_COST_BASIS IS NULL AND @OLD_COST_BASIS IS NOT NULL) OR
       (@OLD_COST_BASIS IS NULL AND @NEW_COST_BASIS IS NOT NULL) OR
       (@NEW_COST_BASIS != @OLD_COST_BASIS)
    BEGIN
      UPDATE PART
      SET cost=@NEW_COST, cost_basis=@NEW_COST_BASIS
      WHERE id=@partId;
      
      SET @COST_WAS_SET = 1;
      SET @COST_WAS_CHANGED = 1;
    END
  END
  
  -- 5. If weight was not set to NULL - calculate new value for a weight.
  IF (@WEIGHT_WAS_SET = 0)
  BEGIN
    IF (@THERE_ARE_BOMS = 0)
    BEGIN
      UPDATE PART_GOAL
      SET calculated_value=NULL
      WHERE source_id=@partId AND goal='Weight';
    END
    ELSE
    BEGIN
      UPDATE PART_GOAL
      SET calculated_value=(SELECT
        CASE
          WHEN SUM(
            CASE child_p.weight_basis
              WHEN 'Actual' THEN 0
              WHEN 'Calculated' THEN 0
              WHEN 'Estimated' THEN 0
              ELSE 1
            END
          ) > 0 THEN NULL
          ELSE SUM( ISNULL(child_p.weight,0)*ISNULL(child_pb.quantity, 0) )
        END
        FROM PART_BOM child_pb INNER JOIN PART child_p ON child_pb.related_id=child_p.id
        WHERE child_pb.source_id=@partId)
      WHERE source_id=@partId;
    END
    
    SELECT TOP 1 @NEW_WEIGHT=ISNULL(actual_value,ISNULL(calculated_value,ISNULL(estimated_value,target_value))),
      @NEW_WEIGHT_BASIS=CASE
        WHEN actual_value IS NOT NULL THEN 'Actual'
        WHEN calculated_value IS NOT NULL THEN 'Calculated'
        WHEN estimated_value IS NOT NULL THEN 'Estimated'
        WHEN target_value IS NOT NULL THEN 'Target'
        ELSE NULL
      END
    FROM PART_GOAL
    WHERE source_id=@partId AND goal='Weight';
    
    IF (@NEW_WEIGHT IS NULL AND @OLD_WEIGHT IS NOT NULL) OR
       (@OLD_WEIGHT IS NULL AND @NEW_WEIGHT IS NOT NULL) OR
       (@NEW_WEIGHT != @OLD_WEIGHT) OR
       (@NEW_WEIGHT_BASIS IS NULL AND @OLD_WEIGHT_BASIS IS NOT NULL) OR
       (@OLD_WEIGHT_BASIS IS NULL AND @NEW_WEIGHT_BASIS IS NOT NULL) OR
       (@NEW_WEIGHT_BASIS != @OLD_WEIGHT_BASIS)
    BEGIN
      UPDATE PART
      SET weight=@NEW_WEIGHT, weight_basis=@NEW_WEIGHT_BASIS
      WHERE id=@partId;
      
      SET @WEIGHT_WAS_SET = 1;
      SET @WEIGHT_WAS_CHANGED = 1;
    END
  END
  
  IF (@COST_WAS_CHANGED = 0) AND (@WEIGHT_WAS_CHANGED = 0)
  BEGIN
    GOTO finish;
  END
  
  CREATE TABLE #tmp_PARTS_TO_USE(id CHAR(32) COLLATE database_default PRIMARY KEY);
  CREATE TABLE #tmp_BOMS_TO_USE(id CHAR(32) COLLATE database_default PRIMARY KEY,
                               source_id CHAR(32) COLLATE database_default,
                               related_id CHAR(32) COLLATE database_default);
  CREATE TABLE #NEW_BOMS(id CHAR(32) COLLATE database_default PRIMARY KEY,
                         source_id CHAR(32) COLLATE database_default,
                         related_id CHAR(32) COLLATE database_default);
  
  DECLARE @TMP_PARTS TABLE(id CHAR(32) COLLATE database_default PRIMARY KEY);
  
  CREATE INDEX ind_NEW_BOMS_source_id ON #NEW_BOMS(source_id);
  
  INSERT INTO @TMP_PARTS(id)
  VALUES(@partId);
  
  /* +++ build a list of Parts depending on a current Part */
  WHILE (1=1)
  BEGIN
    INSERT INTO #tmp_PARTS_TO_USE(id)
    SELECT id
    FROM @TMP_PARTS;
    
    INSERT INTO #NEW_BOMS(id, source_id, related_id)
    SELECT pb.id, pb.source_id, pb.related_id
    FROM PART_BOM pb
      INNER JOIN @TMP_PARTS p ON p.id=pb.related_id
      LEFT OUTER JOIN #tmp_BOMS_TO_USE pb_old ON pb.id=pb_old.id
    WHERE pb_old.id IS NULL;
    
    IF @@ROWCOUNT = 0
    BEGIN
      BREAK;
    END
    
    INSERT INTO #tmp_BOMS_TO_USE(id, source_id, related_id)
    SELECT id, source_id, related_id
    FROM #NEW_BOMS;
    
    DELETE FROM @TMP_PARTS;
    
    INSERT INTO @TMP_PARTS
    SELECT DISTINCT source_id
    FROM #NEW_BOMS pb LEFT OUTER JOIN #tmp_PARTS_TO_USE p ON pb.source_id=p.id
    WHERE p.id IS NULL;
    
    DELETE FROM #NEW_BOMS;
  END
  
  DELETE FROM @TMP_PARTS;
  DROP TABLE #NEW_BOMS;
  
  CREATE INDEX ind_tmp_BOMS_TO_USE_source_id ON #tmp_BOMS_TO_USE(source_id);
  CREATE INDEX ind_tmp_BOMS_TO_USE_related_id ON #tmp_BOMS_TO_USE(related_id);
  /* --- build a list of Parts depending on a current Part */
  
  /* +++ iterate over leaf Parts. And calculate their costs. Check for infinite loop also. */
  DECLARE @PARTS_TO_ROLLUP INT;
  DECLARE @CURRENT_PARTS TABLE(id CHAR(32) COLLATE database_default PRIMARY KEY);
  
  WHILE (1=1)
  BEGIN
    DECLARE @LEAF_PARTS_COUNT INT;
    
    /* find leaf nodes */
    INSERT INTO @TMP_PARTS(id)
    SELECT p.id
    FROM #tmp_PARTS_TO_USE p LEFT OUTER JOIN #tmp_BOMS_TO_USE pb ON p.id=pb.source_id
    WHERE pb.id IS NULL;
    
    SET @LEAF_PARTS_COUNT = @@ROWCOUNT;
    
    IF (@LEAF_PARTS_COUNT = 0) /* there are no leaf nodes any more */
    BEGIN
      DECLARE @infinitive_loop_parent_id CHAR(32); /* id of some "parent" Part from infinite loop */
      DECLARE @infinitive_loop_child_id CHAR(32);  /* id of "child" Part from infinite loop */
      
      SELECT TOP 1 @infinitive_loop_parent_id = pb.source_id, @infinitive_loop_child_id=pb.related_id
      FROM #tmp_BOMS_TO_USE pb INNER JOIN #tmp_PARTS_TO_USE p ON pb.source_id=p.id;
      
      IF (@infinitive_loop_parent_id IS NULL) /* there is no infinite loop. There no Parts any more. */
      BEGIN
        BREAK;
      END
      
      DECLARE @parent_part_keyed_name VARCHAR(128);
      DECLARE @child_part_keyed_name VARCHAR(128);
      
      SELECT @parent_part_keyed_name=ISNULL(keyed_name,id)
      FROM PART
      WHERE id=@infinitive_loop_parent_id;
      
      SELECT @child_part_keyed_name=ISNULL(keyed_name,id)
      FROM PART
      WHERE id=@infinitive_loop_child_id;
      
      DECLARE @infiniteLoopMsg VARCHAR(2000); /* 2000>>128+32+128+32 */
      DECLARE @infiniteLoopSeverity INT;     /* the user-defined severity level associated with this message */
      DECLARE @infiniteLoopState INT;        /* Is an arbitrary integer from 1 through 127 that represents information about the invocation state of the error. */
      
      SET @infiniteLoopMsg = '<B>The BOM structure contains circular references</B>. Please check dependency between Part "' + 
        @parent_part_keyed_name + '" (' + @infinitive_loop_parent_id + ') and "' +
        @child_part_keyed_name + '" (' + @infinitive_loop_child_id + ').';
      SET @infiniteLoopSeverity = 16; /* Severity Levels 11 through 16: These messages indicate errors that can be corrected by the user. */
      SET @infiniteLoopState = 1;
      
      RAISERROR(@infiniteLoopMsg, @infiniteLoopSeverity, @infiniteLoopState)
      RETURN @@ERROR;
    END
    
    DELETE FROM @CURRENT_PARTS;
    
    INSERT INTO @CURRENT_PARTS(id)
    SELECT DISTINCT pb.source_id
    FROM #tmp_BOMS_TO_USE pb INNER JOIN @TMP_PARTS p ON p.id=pb.related_id;
    
    IF (@COST_WAS_CHANGED = 1)
    BEGIN
      -- . Update calculated cost value on Part Goals
      UPDATE PART_GOAL
      SET calculated_value=new_cost.new_val
      FROM PART_GOAL pg
        INNER JOIN
          (SELECT pg.id id,
             CASE
               WHEN SUM(
                      CASE child_p.cost_basis
                        WHEN 'Actual' THEN 0
                        WHEN 'Calculated' THEN 0
                        WHEN 'Estimated' THEN 0
                        ELSE 1
                      END
                    ) > 0 THEN NULL
               ELSE SUM( ISNULL(child_p.cost,0)*ISNULL(child_pb.quantity, 0) )
             END new_val
           FROM @CURRENT_PARTS current_p
             INNER JOIN PART_GOAL pg ON pg.source_id=current_p.id
             INNER JOIN PART_BOM child_pb ON child_pb.source_id=current_p.id
             INNER JOIN PART child_p ON child_pb.related_id=child_p.id
           WHERE pg.goal='Cost'
           GROUP BY pg.id) new_cost
        ON pg.id=new_cost.id;
      
      -- . Set correct costs on current Parts
      UPDATE PART
      SET cost=new_cost.new_value, cost_basis=new_cost.new_basis
      FROM PART p
        INNER JOIN
          (SELECT p.id id, ISNULL(actual_value,ISNULL(calculated_value,ISNULL(estimated_value,target_value))) new_value,
             CASE
               WHEN actual_value IS NOT NULL THEN 'Actual'
               WHEN calculated_value IS NOT NULL THEN 'Calculated'
               WHEN estimated_value IS NOT NULL THEN 'Estimated'
               WHEN target_value IS NOT NULL THEN 'Target'
               ELSE NULL
             END new_basis
           FROM @CURRENT_PARTS p INNER JOIN PART_GOAL pg ON p.id=pg.source_id
           WHERE pg.goal='Cost') new_cost
        ON p.id=new_cost.id;
    END
    
    IF (@WEIGHT_WAS_CHANGED = 1)
    BEGIN
      -- . Update calculated weight value on Part Goals
      UPDATE PART_GOAL
      SET calculated_value=new_weight.new_val
      FROM PART_GOAL pg
        INNER JOIN
          (SELECT pg.id id,
             CASE
               WHEN SUM(
                      CASE child_p.weight_basis
                        WHEN 'Actual' THEN 0
                        WHEN 'Calculated' THEN 0
                        WHEN 'Estimated' THEN 0
                        ELSE 1
                      END
                    ) > 0 THEN NULL
               ELSE SUM( ISNULL(child_p.weight,0)*ISNULL(child_pb.quantity, 0) )
             END new_val
           FROM @CURRENT_PARTS current_p
             INNER JOIN PART_GOAL pg ON pg.source_id=current_p.id
             INNER JOIN PART_BOM child_pb ON child_pb.source_id=current_p.id
             INNER JOIN PART child_p ON child_pb.related_id=child_p.id
           WHERE pg.goal='Weight'
           GROUP BY pg.id) new_weight
        ON pg.id=new_weight.id;
      
      -- . Set correct weights on current Parts
      UPDATE PART
      SET weight=new_weight.new_value, weight_basis=new_weight.new_basis
      FROM PART p
        INNER JOIN
          (SELECT p.id id, ISNULL(actual_value,ISNULL(calculated_value,ISNULL(estimated_value,target_value))) new_value,
             CASE
               WHEN actual_value IS NOT NULL THEN 'Actual'
               WHEN calculated_value IS NOT NULL THEN 'Calculated'
               WHEN estimated_value IS NOT NULL THEN 'Estimated'
               WHEN target_value IS NOT NULL THEN 'Target'
               ELSE NULL
             END new_basis
           FROM @CURRENT_PARTS p INNER JOIN PART_GOAL pg ON p.id=pg.source_id
           WHERE pg.goal='Weight') new_weight
        ON p.id=new_weight.id;
    END
    
    /* delete BOMs pointing to leaf Parts */
    DELETE FROM #tmp_BOMS_TO_USE
    WHERE related_id IN (SELECT id FROM @TMP_PARTS);
    
    /* delete leaf Parts */
    DELETE FROM #tmp_PARTS_TO_USE
    WHERE id IN (SELECT id FROM @TMP_PARTS);

    DELETE FROM @TMP_PARTS;
  END
  DROP TABLE #tmp_BOMS_TO_USE;
  DROP TABLE #tmp_PARTS_TO_USE;
  /* +++ iterate over leaf Parts */
  
finish:
  /* return recordset to a caller */
  IF (@itemType='Part')
    SELECT * FROM PART WHERE id=@id;
  
  ELSE IF (@itemType='Part BOM')
    SELECT * FROM PART_BOM WHERE id=@id;
  
  ELSE IF (@itemType='Part Goal')
    SELECT * FROM PART_GOAL WHERE id=@id;
END
]]></sqlserver_body>
  <stale>0</stale>
  <transform_first>0</transform_first>
  <type>procedure</type>
  <name>PE_RollupPart</name>
 </Item>
</AML>