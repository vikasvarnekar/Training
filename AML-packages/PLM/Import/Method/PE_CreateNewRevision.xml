<AML>
 <Item type="Method" id="487CFDDF4850492288711BC61CEED00A" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// PE_CreateNewRevision
// Called from a server action. Creates a new revision outside of change control

Item itemsWithNotAllowedActions = this.getItemsByXPath("//Item[@action and @action!='PE_CreateNewRevision' and @action!='add' and " +
  "@action!='delete' and @action!='update' and @action!='edit' and @action!='get' and @action!='skip']");
if (itemsWithNotAllowedActions.getItemCount() > 0)
{
  //"this" shouldn't contain Items with not allowed "actions" because such Items is applied in this server-side method.
    //So, e.g., not admin user can call actions where "execution_allowed_to" is for administrators.
  throw new InvalidOperationException();
}

Innovator inn = this.getInnovator();
string thisType = this.getType();
string thisName = this.getProperty("keyed_name","");

if(this.isNew() || this.getAttribute("isTemp", "").Equals("1", StringComparison.OrdinalIgnoreCase))
{
  return inn.newError(CCO.ErrorLookup.Lookup("PE_CreateNewRevision_MustBeSaved", thisType));
}

bool isInReleasedState = String.Equals(this.getProperty("state",""), "Released", StringComparison.Ordinal);

// Item must be in the Released state
if (!isInReleasedState)
{
  return inn.newError(CCO.ErrorLookup.Lookup("PE_ManualRelease_MustBeInReleasedState", thisType));
}

// Make sure the current user is in the Owner identity
string ownedById = this.getProperty("owned_by_id");
if (!CCO.Permissions.IdentityListHasId(Aras.Server.Security.Permissions.Current.IdentitiesList, ownedById))
{
  return inn.newError(CCO.ErrorLookup.Lookup("PE_ManualRelease_YouMustBeAMember", this.getPropertyAttribute("owned_by_id","keyed_name","Owner")));
}

// Make sure the item is not used on any change items
Item checkResult = this.apply("PE_CheckChangeItemUsage");
if(checkResult.isError())
{
  return checkResult;
}
  
// Grant 'Aras PLM' permissions
Aras.Server.Security.Identity plmIdentity = Aras.Server.Security.Identity.GetByName("Aras PLM");
bool PermissionWasSet  = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity);

try
{
  // Version and unlock the item
  Item resItem = this.apply("version");
  if (resItem.isError()) return resItem;
  resItem = resItem.apply("unlock"); 
  return resItem; 
}
finally
{
  // Revoke 'Aras PLM' permissions
  if (PermissionWasSet) Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity);
}
]]></method_code>
  <method_type>C#</method_type>
  <name>PE_CreateNewRevision</name>
 </Item>
</AML>